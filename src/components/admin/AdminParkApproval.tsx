import {
  AlertTriangle,
  ArrowLeft,
  Building,
  CheckCircle,
  Eye,
  FileText,
  Loader,
  MapPin,
  Shield,
  Trash2,
  User,
  X,
  ZoomIn
} from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { useAdminApproval } from '../../hooks/useAdminApproval';
import { useParkImages } from '../../hooks/useAdminData';
import { FacilityImage, PendingPark } from '../../types/admin';
import { supabase } from '../../utils/supabase';
import Button from '../Button';
import Card from '../Card';

interface AdminParkApprovalProps {
  pendingParks: PendingPark[];
  isLoading: boolean;
  onApprovalComplete: (message: string) => void;
  onError: (error: string) => void;
}

interface OwnerIdentityData {
  id: string;
  owner_name: string;
  postal_code: string;
  address: string;
  phone_number: string;
  email: string;
  identity_document_url: string;
  identity_document_filename: string;
  identity_status: string;
  identity_created_at: string;
}

export const AdminParkApproval: React.FC<AdminParkApprovalProps> = ({
  pendingParks,
  isLoading,
  onApprovalComplete,
  onError
}) => {
  // „Éá„Éê„ÉÉ„Ç∞: Âèó„ÅëÂèñ„Å£„Å¶„ÅÑ„Çãparks„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
  console.log('üîç AdminParkApproval received parks:', pendingParks);
  pendingParks.forEach((park, index) => {
    console.log(`üèûÔ∏è Park ${index + 1}:`, {
      id: park.id,
      name: park.name,
      owner_id: park.owner_id,
      owner_name: park.owner_name,
      owner_address: park.owner_address,
      owner_postal_code: park.owner_postal_code,
      owner_phone_number: park.owner_phone_number,
      owner_email: park.owner_email
    });
  });

  const [selectedPark, setSelectedPark] = useState<PendingPark | null>(null);
  const [rejectionNote, setRejectionNote] = useState('');
  const [selectedImage, setSelectedImage] = useState<FacilityImage | null>(null);
  const [imageReviewMode, setImageReviewMode] = useState(false);
  const [enlargedImage, setEnlargedImage] = useState<string | null>(null);
  const [ownerIdentityData, setOwnerIdentityData] = useState<OwnerIdentityData | null>(null);
  const [identityImageError, setIdentityImageError] = useState<string | null>(null);
  const [identityImageLoading, setIdentityImageLoading] = useState(false);

  const approval = useAdminApproval();
  const parkImages = useParkImages(selectedPark?.id || null);

  // „Éá„Éê„ÉÉ„Ç∞Áî®Ôºöowner_verifications„ÉÜ„Éº„Éñ„É´„ÅÆ„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
  useEffect(() => {
    const debugOwnerVerifications = async () => {
      console.log('üîç Debugging owner_verifications table...');

      try {
        const { data, error } = await supabase
          .from('owner_verifications')
          .select('*')
          .order('created_at', { ascending: false });

        if (error) {
          console.error('‚ùå Error fetching owner_verifications:', error);
        } else {
          console.log('‚úÖ Owner verifications data:', data);

          // identity_„Åã„ÇâÂßã„Åæ„Çã„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
          const identityFiles = data?.filter(item =>
            item.verification_id && item.verification_id.includes('identity_')
          );

          console.log('üìÑ Identity files found:', identityFiles);

          // verification_data„ÅÆ‰∏≠Ë∫´„ÇÇÁ¢∫Ë™ç
          data?.forEach(item => {
            console.log(`üîç Verification item ${item.id}:`, {
              user_id: item.user_id,
              verification_id: item.verification_id,
              status: item.status,
              verification_data: item.verification_data
            });
          });
        }
      } catch (error) {
        console.error('‚ùå Debug query failed:', error);
      }
    };

    debugOwnerVerifications();
  }, []);

  // Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Éá„Éº„Çø„ÇíÂèñÂæó
  useEffect(() => {
    if (selectedPark?.owner_id) {
      fetchOwnerIdentityData(selectedPark.owner_id);
    }
  }, [selectedPark]);

  const fetchOwnerIdentityData = async (ownerId: string) => {
    try {
      setIdentityImageLoading(true);
      setIdentityImageError(null);
      console.log('üîç Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠:', ownerId);

      // „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÇíÂèñÂæó
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('name, postal_code, address, phone_number, email')
        .eq('id', ownerId)
        .single();

      if (profileError) {
        console.error('‚ùå „Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæó„Ç®„É©„Éº:', profileError);
        setIdentityImageError(`„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${profileError.message}`);
        return;
      }

      console.log('‚úÖ „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±:', profileData);

      // Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûÊÉÖÂ†±„ÇíÂèñÂæó
      const { data: identityData, error: identityError } = await supabase
        .from('owner_verifications')
        .select('*')
        .eq('user_id', ownerId)
        .order('created_at', { ascending: false })
        .limit(1);

      if (identityError) {
        console.error('‚ùå Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûÂèñÂæó„Ç®„É©„Éº:', identityError);
        // „Ç®„É©„Éº„Åå„ÅÇ„Å£„Å¶„ÇÇ„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÅØË°®Á§∫„Åô„Çã
        console.log('‚ö†Ô∏è Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Åå„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÅÆ„ÅøË°®Á§∫');
      }

      console.log('üìä Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Éá„Éº„Çø:', identityData);

      if (identityData && identityData.length > 0) {
        const identity = identityData[0];
        console.log('üìã Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûË©≥Á¥∞:', identity);

        // verification_data„ÅÆÊßãÈÄ†„ÇíÁ¢∫Ë™ç
        console.log('üîç verification_data:', identity.verification_data);

        // Ë§áÊï∞„ÅÆÊñπÊ≥ï„Åßdocument_url„ÇíÂèñÂæó
        let documentUrl = '';
        let documentFilename = '';

        if (identity.verification_data) {
          // verification_data„Åå„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂ†¥Âêà
          if (typeof identity.verification_data === 'object') {
            documentUrl = identity.verification_data.document_url || identity.verification_data.file_path || '';
            documentFilename = identity.verification_data.file_name || identity.verification_data.filename || '';
          }
        }

        // document_url„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØverification_id„Çí‰ΩøÁî®
        if (!documentUrl && identity.verification_id) {
          documentUrl = identity.verification_id;
        }

        // „Éï„Ç°„Ç§„É´Âêç„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàÂêç„Çí‰ΩøÁî®
        if (!documentFilename) {
          documentFilename = documentUrl.split('/').pop() || 'identity_document';
        }

        console.log('üìÑ ÊúÄÁµÇÁöÑ„Å™ÁîªÂÉèURL:', documentUrl);
        console.log('üìÑ „Éï„Ç°„Ç§„É´Âêç:', documentFilename);

        setOwnerIdentityData({
          id: identity.id,
          owner_name: profileData.name || 'ÂêçÂâçÊú™ÁôªÈå≤',
          postal_code: profileData.postal_code || 'Êú™ÁôªÈå≤',
          address: profileData.address || 'Êú™ÁôªÈå≤',
          phone_number: profileData.phone_number || 'Êú™ÁôªÈå≤',
          email: profileData.email || 'Êú™ÁôªÈå≤',
          identity_document_url: documentUrl,
          identity_document_filename: documentFilename,
          identity_status: identity.status || 'pending',
          identity_created_at: identity.created_at || new Date().toISOString()
        });
      } else {
        // Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Åå„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇ„ÄÅ„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÅØË°®Á§∫
        console.log('üìã Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûÊú™ÊèêÂá∫„ÅÆ„Åü„ÇÅ„ÄÅ„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÅÆ„ÅøË°®Á§∫');
        setOwnerIdentityData({
          id: '',
          owner_name: profileData.name || 'ÂêçÂâçÊú™ÁôªÈå≤',
          postal_code: profileData.postal_code || 'Êú™ÁôªÈå≤',
          address: profileData.address || 'Êú™ÁôªÈå≤',
          phone_number: profileData.phone_number || 'Êú™ÁôªÈå≤',
          email: profileData.email || 'Êú™ÁôªÈå≤',
          identity_document_url: '',
          identity_document_filename: '',
          identity_status: 'not_submitted',
          identity_created_at: ''
        });
      }
    } catch (error) {
      console.error('‚ùå Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
      setIdentityImageError(`„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error}`);
    } finally {
      setIdentityImageLoading(false);
    }
  };

  const getImageFromStorage = async (url: string) => {
    try {
      const { data, error } = await supabase.storage
        .from('vaccine-certs')
        .download(url);

      if (error) {
        console.error('ÁîªÂÉèÂèñÂæó„Ç®„É©„Éº:', error);
        return null;
      }

      return URL.createObjectURL(data);
    } catch (error) {
      console.error('ÁîªÂÉèÂèñÂæó‰æãÂ§ñ:', error);
      return null;
    }
  };

  const handleParkApproval = async (parkId: string, approved: boolean) => {
    try {
      console.log(`${approved ? '‚úÖ' : '‚ùå'} „Éâ„ÉÉ„Ç∞„É©„É≥${approved ? 'ÊâøË™ç' : 'Âç¥‰∏ã'}‰∏≠:`, parkId);

      // ÊâøË™ç„ÅÆÂ†¥Âêà„ÅØÂÖ®ÁîªÂÉè„ÅåÊâøË™ç„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      if (approved) {
        const pendingImages = parkImages.parkImages.filter(img =>
          img.is_approved === null || img.is_approved === false
        );
        if (pendingImages.length > 0) {
          onError('„Åô„Åπ„Å¶„ÅÆÁîªÂÉè„ÇíÊâøË™ç„Åó„Å¶„Åã„ÇâÊñΩË®≠„ÇíÊâøË™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
          return;
        }
      }

      const result = await approval.handleParkApproval(parkId, approved, rejectionNote);

      if (result.success) {
        onApprovalComplete(result.message);
        setSelectedPark(null);
        setRejectionNote('');
      } else {
        onError(result.message);
      }
    } catch (error) {
      console.error('‚ùå „Éâ„ÉÉ„Ç∞„É©„É≥ÊâøË™ç/Âç¥‰∏ã„Ç®„É©„Éº:', error);
      onError(`Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${(error as Error).message}`);
    }
  };

  const handleImageSelect = (image: FacilityImage) => {
    setSelectedImage(image);
    setImageReviewMode(true);
    setRejectionNote(image.admin_notes || '');
  };

  const handleImageApproval = async (approved: boolean) => {
    if (!selectedImage) return;

    try {
      const result = await approval.handleImageApproval(selectedImage, approved, rejectionNote);

      if (result.success) {
        onApprovalComplete(result.message);
        await parkImages.fetchParkImages(selectedPark!.id);
        setImageReviewMode(false);
        setSelectedImage(null);
        setRejectionNote('');
      } else {
        onError(result.message);
      }
    } catch (error) {
      console.error('‚ùå ÁîªÂÉèÊâøË™ç„Ç®„É©„Éº:', error);
      onError(`Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${(error as Error).message}`);
    }
  };

  const handleParkDelete = async (parkId: string) => {
    const confirmDelete = window.confirm('„Åì„ÅÆ„Éâ„ÉÉ„Ç∞„É©„É≥Áî≥Ë´ã„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ');
    if (!confirmDelete) return;

    try {
      console.log('üóëÔ∏è Èñ¢ÈÄ£„É¨„Ç≥„Éº„Éâ„ÇíÂâäÈô§‰∏≠...');

      // 1. „Éã„É•„Éº„Çπ„Éª„ÅäÁü•„Çâ„Åõ„ÇíÂâäÈô§
      try {
        const { error: newsError } = await supabase
          .from('news_announcements')
          .delete()
          .eq('park_id', parkId);

        if (newsError) {
          console.error('‚ùå „Éã„É•„Éº„ÇπÂâäÈô§„Ç®„É©„Éº:', newsError);
          onError(`„Éã„É•„Éº„Çπ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${newsError.message}`);
          return;
        }
        console.log('‚úÖ „Éã„É•„Éº„ÇπÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „Éã„É•„Éº„ÇπÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„Éã„É•„Éº„ÇπÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 2. Êñ∞Ë¶èÈñãÂúíÊÉÖÂ†±„ÇíÂâäÈô§
      try {
        const { error: newParkOpeningsError } = await supabase
          .from('new_park_openings')
          .delete()
          .eq('park_id', parkId);

        if (newParkOpeningsError) {
          console.error('‚ùå Êñ∞Ë¶èÈñãÂúíÊÉÖÂ†±ÂâäÈô§„Ç®„É©„Éº:', newParkOpeningsError);
          onError(`Êñ∞Ë¶èÈñãÂúíÊÉÖÂ†±„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${newParkOpeningsError.message}`);
          return;
        }
        console.log('‚úÖ Êñ∞Ë¶èÈñãÂúíÊÉÖÂ†±ÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå Êñ∞Ë¶èÈñãÂúíÊÉÖÂ†±ÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('Êñ∞Ë¶èÈñãÂúíÊÉÖÂ†±ÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 3. „É≠„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞„ÇíÂâäÈô§Ôºà„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÁµåÁî±Ôºâ
      try {
        // „Åæ„Åö„Åì„ÅÆ„Éë„Éº„ÇØ„ÅÆ„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØID„ÇíÂèñÂæó
        const { data: lockData } = await supabase
          .from('smart_locks')
          .select('lock_id')
          .eq('park_id', parkId);

        if (lockData && lockData.length > 0) {
          const lockIds = lockData.map(lock => lock.lock_id);

          const { error: lockAccessError } = await supabase
            .from('lock_access_logs')
            .delete()
            .in('lock_id', lockIds);

          if (lockAccessError) {
            console.error('‚ùå „É≠„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞ÂâäÈô§„Ç®„É©„Éº:', lockAccessError);
            onError(`„É≠„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${lockAccessError.message}`);
            return;
          }
        }
        console.log('‚úÖ „É≠„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞ÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „É≠„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞ÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„É≠„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞ÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 4. „Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØ„ÇíÂâäÈô§
      try {
        const { error: smartLocksError } = await supabase
          .from('smart_locks')
          .delete()
          .eq('park_id', parkId);

        if (smartLocksError) {
          console.error('‚ùå „Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂâäÈô§„Ç®„É©„Éº:', smartLocksError);
          onError(`„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${smartLocksError.message}`);
          return;
        }
        console.log('‚úÖ „Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 5. „É¶„Éº„Ç∂„Éº„Ç®„É≥„Éà„É™„Éº„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÂâäÈô§
      try {
        const { error: entryStatusError } = await supabase
          .from('user_entry_status')
          .delete()
          .eq('park_id', parkId);

        if (entryStatusError) {
          console.error('‚ùå „Ç®„É≥„Éà„É™„Éº„Çπ„ÉÜ„Éº„Çø„ÇπÂâäÈô§„Ç®„É©„Éº:', entryStatusError);
          onError(`„Ç®„É≥„Éà„É™„Éº„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${entryStatusError.message}`);
          return;
        }
        console.log('‚úÖ „Ç®„É≥„Éà„É™„Éº„Çπ„ÉÜ„Éº„Çø„ÇπÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „Ç®„É≥„Éà„É™„Éº„Çπ„ÉÜ„Éº„Çø„ÇπÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„Ç®„É≥„Éà„É™„Éº„Çπ„ÉÜ„Éº„Çø„ÇπÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 6. ‰∫àÁ¥Ñ„ÇíÂâäÈô§
      try {
        const { error: reservationsError } = await supabase
          .from('reservations')
          .delete()
          .eq('park_id', parkId);

        if (reservationsError) {
          console.error('‚ùå ‰∫àÁ¥ÑÂâäÈô§„Ç®„É©„Éº:', reservationsError);
          onError(`‰∫àÁ¥Ñ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${reservationsError.message}`);
          return;
        }
        console.log('‚úÖ ‰∫àÁ¥ÑÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå ‰∫àÁ¥ÑÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('‰∫àÁ¥ÑÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 7. Áä¨„ÅÆÂá∫‰ºö„ÅÑË®òÈå≤„ÇíÂâäÈô§
      try {
        const { error: encountersError } = await supabase
          .from('dog_encounters')
          .delete()
          .eq('park_id', parkId);

        if (encountersError) {
          console.error('‚ùå Âá∫‰ºö„ÅÑË®òÈå≤ÂâäÈô§„Ç®„É©„Éº:', encountersError);
          onError(`Âá∫‰ºö„ÅÑË®òÈå≤„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${encountersError.message}`);
          return;
        }
        console.log('‚úÖ Âá∫‰ºö„ÅÑË®òÈå≤ÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå Âá∫‰ºö„ÅÑË®òÈå≤ÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('Âá∫‰ºö„ÅÑË®òÈå≤ÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 8. „É¨„Éì„É•„ÉºÁîªÂÉè„ÇíÂâäÈô§Ôºà„É¨„Éì„É•„ÉºÁµåÁî±Ôºâ
      try {
        // „Åæ„Åö„Åì„ÅÆ„Éë„Éº„ÇØ„ÅÆ„É¨„Éì„É•„ÉºID„ÇíÂèñÂæó
        const { data: reviewData } = await supabase
          .from('dog_park_reviews')
          .select('id')
          .eq('park_id', parkId);

        if (reviewData && reviewData.length > 0) {
          const reviewIds = reviewData.map(review => review.id);

          const { error: reviewImagesError } = await supabase
            .from('dog_park_review_images')
            .delete()
            .in('review_id', reviewIds);

          if (reviewImagesError) {
            console.error('‚ùå „É¨„Éì„É•„ÉºÁîªÂÉèÂâäÈô§„Ç®„É©„Éº:', reviewImagesError);
            onError(`„É¨„Éì„É•„ÉºÁîªÂÉè„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${reviewImagesError.message}`);
            return;
          }
        }
        console.log('‚úÖ „É¨„Éì„É•„ÉºÁîªÂÉèÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „É¨„Éì„É•„ÉºÁîªÂÉèÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„É¨„Éì„É•„ÉºÁîªÂÉèÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 9. „É¨„Éì„É•„Éº„ÇíÂâäÈô§
      try {
        const { error: reviewsError } = await supabase
          .from('dog_park_reviews')
          .delete()
          .eq('park_id', parkId);

        if (reviewsError) {
          console.error('‚ùå „É¨„Éì„É•„ÉºÂâäÈô§„Ç®„É©„Éº:', reviewsError);
          onError(`„É¨„Éì„É•„Éº„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${reviewsError.message}`);
          return;
        }
        console.log('‚úÖ „É¨„Éì„É•„ÉºÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „É¨„Éì„É•„ÉºÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„É¨„Éì„É•„ÉºÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 10. ÊñΩË®≠ÁîªÂÉè„ÇíÂâäÈô§
      try {
        const { error: imagesError } = await supabase
          .from('dog_park_facility_images')
          .delete()
          .eq('park_id', parkId);

        if (imagesError) {
          console.error('‚ùå ÊñΩË®≠ÁîªÂÉèÂâäÈô§„Ç®„É©„Éº:', imagesError);
          onError(`ÊñΩË®≠ÁîªÂÉè„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${imagesError.message}`);
          return;
        }
        console.log('‚úÖ ÊñΩË®≠ÁîªÂÉèÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå ÊñΩË®≠ÁîªÂÉèÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('ÊñΩË®≠ÁîªÂÉèÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 11. „Éë„Éº„ÇØÁîªÂÉè„ÇíÂâäÈô§
      try {
        const { error: parkImagesError } = await supabase
          .from('dog_park_images')
          .delete()
          .eq('park_id', parkId);

        if (parkImagesError) {
          console.error('‚ùå „Éë„Éº„ÇØÁîªÂÉèÂâäÈô§„Ç®„É©„Éº:', parkImagesError);
          onError(`„Éë„Éº„ÇØÁîªÂÉè„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${parkImagesError.message}`);
          return;
        }
        console.log('‚úÖ „Éë„Éº„ÇØÁîªÂÉèÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „Éë„Éº„ÇØÁîªÂÉèÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„Éë„Éº„ÇØÁîªÂÉèÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 12. „É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Ç∏„ÇíÂâäÈô§
      try {
        const { error: reviewStagesError } = await supabase
          .from('dog_park_review_stages')
          .delete()
          .eq('park_id', parkId);

        if (reviewStagesError) {
          console.error('‚ùå „É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Ç∏ÂâäÈô§„Ç®„É©„Éº:', reviewStagesError);
          onError(`„É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Ç∏„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${reviewStagesError.message}`);
          return;
        }
        console.log('‚úÖ „É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Ç∏ÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Ç∏ÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„É¨„Éì„É•„Éº„Çπ„ÉÜ„Éº„Ç∏ÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      // 13. ÊúÄÂæå„Å´„Éâ„ÉÉ„Ç∞„É©„É≥Êú¨‰Ωì„ÇíÂâäÈô§
      try {
        const { error: deleteError } = await supabase
          .from('dog_parks')
          .delete()
          .eq('id', parkId);

        if (deleteError) {
          console.error('‚ùå „Éâ„ÉÉ„Ç∞„É©„É≥ÂâäÈô§„Ç®„É©„Éº:', deleteError);
          onError(`„Éâ„ÉÉ„Ç∞„É©„É≥„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${deleteError.message}`);
          return;
        }
        console.log('‚úÖ „Éâ„ÉÉ„Ç∞„É©„É≥Êú¨‰ΩìÂâäÈô§ÂÆå‰∫Ü');
      } catch (error) {
        console.error('‚ùå „Éâ„ÉÉ„Ç∞„É©„É≥ÂâäÈô§Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        onError('„Éâ„ÉÉ„Ç∞„É©„É≥ÂâäÈô§Âá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
        return;
      }

      console.log('‚úÖ „Éâ„ÉÉ„Ç∞„É©„É≥„Å®Èñ¢ÈÄ£„Éá„Éº„Çø„ÅÆÂâäÈô§ÂÆå‰∫Ü');
      onApprovalComplete('„Éâ„ÉÉ„Ç∞„É©„É≥Áî≥Ë´ã„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ');

      // ‰∏ÄË¶ßÁîªÈù¢„Å´Êàª„Çã
      setSelectedPark(null);

    } catch (error) {
      console.error('‚ùå „Éâ„ÉÉ„Ç∞„É©„É≥ÂâäÈô§„Ç®„É©„Éº:', error);
      onError('„Éâ„ÉÉ„Ç∞„É©„É≥„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    }
  };

  const getImageTypeLabel = (type: string) => {
    const labels: { [key: string]: string } = {
      'overview': 'ÊñΩË®≠ÂÖ®ÊôØ',
      'entrance': 'ÂÖ•Âè£',
      'large_dog_area': 'Â§ßÂûãÁä¨„Ç®„É™„Ç¢',
      'small_dog_area': 'Â∞èÂûãÁä¨„Ç®„É™„Ç¢',
      'private_booth': '„Éó„É©„Ç§„Éô„Éº„Éà„Éñ„Éº„Çπ',
      'parking': 'ÈßêËªäÂ†¥',
      'shower': '„Ç∑„É£„ÉØ„ÉºË®≠ÂÇô',
      'restroom': '„Éà„Ç§„É¨',
      'agility': '„Ç¢„Ç∏„É™„ÉÜ„Ç£Ë®≠ÂÇô',
      'rest_area': '‰ºëÊÜ©„Çπ„Éö„Éº„Çπ',
      'water_station': 'Áµ¶Ê∞¥Ë®≠ÂÇô',
      'exterior': 'Â§ñË¶≥',
      'interior': 'ÂÜÖË£Ö',
      'equipment': 'Ë®≠ÂÇô',
      'area': '„Ç®„É™„Ç¢',
      'other': '„Åù„ÅÆ‰ªñ'
    };
    return labels[type] || type;
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600" />
      </div>
    );
  }

  // ÁîªÂÉèÊã°Â§ßË°®Á§∫„É¢„Éº„ÉÄ„É´
  if (enlargedImage) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center p-4 z-50">
        <div className="relative max-w-6xl w-full max-h-[90vh]">
          <button
            onClick={() => setEnlargedImage(null)}
            className="absolute top-4 right-4 p-2 bg-white bg-opacity-90 shadow-lg rounded-full text-gray-800 hover:bg-opacity-100 transition-all z-10"
          >
            <X className="w-6 h-6" />
          </button>
          <img
            src={enlargedImage}
            alt="Êã°Â§ßÁîªÂÉè"
            className="max-w-full max-h-full mx-auto rounded-lg object-contain"
            onError={(e) => {
              e.currentTarget.src = 'https://via.placeholder.com/800x600?text=Image+Not+Available';
            }}
          />
        </div>
      </div>
    );
  }

  // ÁîªÂÉè„É¨„Éì„É•„Éº„É¢„Éº„Éâ
  if (imageReviewMode && selectedImage) {
    return (
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="flex items-center space-x-4 mb-6">
          <button
            onClick={() => {
              setImageReviewMode(false);
              setSelectedImage(null);
              setRejectionNote('');
            }}
            className="flex items-center text-gray-600 hover:text-gray-800 transition-colors"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            ÁîªÂÉè‰∏ÄË¶ß„Å´Êàª„Çã
          </button>
        </div>

        <Card className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold">ÁîªÂÉè„É¨„Éì„É•„Éº: {getImageTypeLabel(selectedImage.image_type)}</h2>
            <div className="flex space-x-2">
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${selectedImage.is_approved === true
                ? 'bg-green-100 text-green-800'
                : selectedImage.is_approved === false
                  ? 'bg-red-100 text-red-800'
                  : 'bg-yellow-100 text-yellow-800'
                }`}>
                {selectedImage.is_approved === true
                  ? 'ÊâøË™çÊ∏à„Åø'
                  : selectedImage.is_approved === false
                    ? 'Âç¥‰∏ã'
                    : 'ÂØ©ÊüªÂæÖ„Å°'}
              </span>
            </div>
          </div>

          {/* ÁîªÂÉèË°®Á§∫ */}
          <div className="mb-6">
            <div className="w-full h-96 bg-gray-100 rounded-lg overflow-hidden relative group">
              <img
                src={selectedImage.image_url}
                alt={getImageTypeLabel(selectedImage.image_type)}
                className="w-full h-full object-contain cursor-pointer"
                onClick={() => setEnlargedImage(selectedImage.image_url)}
                onError={(e) => {
                  e.currentTarget.src = 'https://via.placeholder.com/800x600?text=Image+Not+Available';
                }}
              />

              {/* Êã°Â§ß„Ç¢„Ç§„Ç≥„É≥ */}
              <div
                className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center cursor-pointer"
                onClick={() => setEnlargedImage(selectedImage.image_url)}
              >
                <ZoomIn className="w-12 h-12 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
              </div>

              {/* „ÇØ„É™„ÉÉ„ÇØ„ÅßÊã°Â§ß„ÅÆ„Éí„É≥„Éà */}
              <div className="absolute bottom-4 right-4">
                <span className="px-2 py-1 bg-white bg-opacity-90 text-gray-800 text-xs rounded border shadow-sm">
                  „ÇØ„É™„ÉÉ„ÇØ„ÅßÊã°Â§ß
                </span>
              </div>
            </div>
          </div>

          {/* Âç¥‰∏ãÁêÜÁî±ÂÖ•Âäõ„Éï„Ç©„Éº„É† */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Âç¥‰∏ãÁêÜÁî±ÔºàÂç¥‰∏ã„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÖ•ÂäõÔºâ
            </label>
            <textarea
              value={rejectionNote}
              onChange={(e) => setRejectionNote(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={4}
              placeholder="‰æã: ÁîªÂÉè„Åå‰∏çÈÆÆÊòé„Åß„Åô„ÄÇ„Çà„ÇäÊòé„Çã„ÅèÈÆÆÊòé„Å™ÁîªÂÉè„ÇíÂÜç„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
            />
          </div>

          {/* ÊâøË™ç/Âç¥‰∏ã„Éú„Çø„É≥ */}
          <div className="flex justify-end space-x-3">
            <Button
              variant="secondary"
              onClick={() => {
                setImageReviewMode(false);
                setSelectedImage(null);
                setRejectionNote('');
              }}
            >
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            <Button
              onClick={() => void handleImageApproval(false)}
              isLoading={approval.isProcessing}
              className="bg-red-600 hover:bg-red-700"
            >
              <X className="w-4 h-4 mr-2" />
              Âç¥‰∏ã
            </Button>
            <Button
              onClick={() => void handleImageApproval(true)}
              isLoading={approval.isProcessing}
              className="bg-green-600 hover:bg-green-700"
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              ÊâøË™ç
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  // ÁîªÂÉèÂØ©Êüª„É¢„Éº„Éâ
  if (imageReviewMode && selectedImage) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold">ÁîªÂÉèÂØ©Êüª</h2>
          <Button
            variant="secondary"
            onClick={() => {
              setImageReviewMode(false);
              setSelectedImage(null);
              setRejectionNote('');
            }}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Êàª„Çã
          </Button>
        </div>

        <Card className="p-6">
          <div className="mb-6">
            <h3 className="font-semibold mb-2">ÁîªÂÉè„Çø„Ç§„Éó: {getImageTypeLabel(selectedImage.image_type)}</h3>
            <div className="relative w-full h-96 bg-gray-100 rounded-lg overflow-hidden group">
              <img
                src={selectedImage.image_url}
                alt={getImageTypeLabel(selectedImage.image_type)}
                className="w-full h-full object-contain cursor-pointer"
                onClick={() => setEnlargedImage(selectedImage.image_url)}
                onError={(e) => {
                  e.currentTarget.src = 'https://via.placeholder.com/800x600?text=Image+Not+Available';
                }}
              />

              {/* Êã°Â§ß„Ç¢„Ç§„Ç≥„É≥ */}
              <div
                className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center cursor-pointer"
                onClick={() => setEnlargedImage(selectedImage.image_url)}
              >
                <ZoomIn className="w-12 h-12 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
              </div>

              {/* „ÇØ„É™„ÉÉ„ÇØ„ÅßÊã°Â§ß„ÅÆ„Éí„É≥„Éà */}
              <div className="absolute bottom-4 right-4">
                <span className="px-2 py-1 bg-white bg-opacity-90 text-gray-800 text-xs rounded border shadow-sm">
                  „ÇØ„É™„ÉÉ„ÇØ„ÅßÊã°Â§ß
                </span>
              </div>
            </div>
          </div>

          {/* Âç¥‰∏ãÁêÜÁî±ÂÖ•Âäõ„Éï„Ç©„Éº„É† */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Âç¥‰∏ãÁêÜÁî±ÔºàÂç¥‰∏ã„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÖ•ÂäõÔºâ
            </label>
            <textarea
              value={rejectionNote}
              onChange={(e) => setRejectionNote(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={4}
              placeholder="‰æã: ÁîªÂÉè„Åå‰∏çÈÆÆÊòé„Åß„Åô„ÄÇ„Çà„ÇäÊòé„Çã„ÅèÈÆÆÊòé„Å™ÁîªÂÉè„ÇíÂÜç„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
            />
          </div>

          {/* ÊâøË™ç/Âç¥‰∏ã„Éú„Çø„É≥ */}
          <div className="flex justify-end space-x-3">
            <Button
              variant="secondary"
              onClick={() => {
                setImageReviewMode(false);
                setSelectedImage(null);
                setRejectionNote('');
              }}
            >
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            <Button
              onClick={() => void handleImageApproval(false)}
              isLoading={approval.isProcessing}
              className="bg-red-600 hover:bg-red-700"
            >
              <X className="w-4 h-4 mr-2" />
              Âç¥‰∏ã
            </Button>
            <Button
              onClick={() => void handleImageApproval(true)}
              isLoading={approval.isProcessing}
              className="bg-green-600 hover:bg-green-700"
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              ÊâøË™ç
            </Button>
          </div>
        </Card>

        {/* Êã°Â§ßÁîªÂÉèË°®Á§∫„É¢„Éº„ÉÄ„É´ */}
        {enlargedImage && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="relative max-w-4xl max-h-full p-4">
              <img
                src={enlargedImage.startsWith('http') ? enlargedImage : `${supabase.storage.from('vaccine-certs').getPublicUrl(enlargedImage).data.publicUrl}`}
                alt="Êã°Â§ßÁîªÂÉè"
                className="max-w-full max-h-full object-contain"
              />
              <Button
                onClick={() => setEnlargedImage(null)}
                className="absolute top-2 right-2 bg-white text-black hover:bg-gray-100"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>
        )}
      </div>
    );
  }

  // Ë©≥Á¥∞Ë°®Á§∫„É¢„Éº„Éâ
  if (selectedPark) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold flex items-center">
            <Building className="w-6 h-6 text-blue-600 mr-2" />
            {selectedPark.name}„ÅÆÂØ©Êüª
          </h2>
          <Button
            variant="secondary"
            onClick={() => setSelectedPark(null)}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            ‰∏ÄË¶ß„Å´Êàª„Çã
          </Button>
        </div>

        {/* ÊñΩË®≠„ÅÆÂü∫Êú¨ÊÉÖÂ†± */}
        <Card className="p-6">
          <h3 className="font-semibold mb-4 flex items-center">
            <Building className="w-5 h-5 mr-2" />
            ÊñΩË®≠ÊÉÖÂ†±
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <p className="text-gray-600">ÊñΩË®≠Âêç</p>
              <p className="font-medium">{selectedPark.name}</p>
            </div>
            <div>
              <p className="text-gray-600">‰ΩèÊâÄ</p>
              <p className="font-medium">{selectedPark.address}</p>
            </div>
            <div>
              <p className="text-gray-600">„Ç™„Éº„Éä„Éº</p>
              <p className="font-medium">{selectedPark.owner_name}</p>
            </div>
            <div>
              <p className="text-gray-600">Áî≥Ë´ãÊó•</p>
              <p className="font-medium">{new Date(selectedPark.created_at).toLocaleDateString('ja-JP')}</p>
            </div>
          </div>
        </Card>

        {/* Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Å®ÁôªÈå≤ÊÉÖÂ†± */}
        <Card className="p-6">
          <h3 className="font-semibold mb-4 flex items-center">
            <Shield className="w-5 h-5 mr-2" />
            Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÉªÁôªÈå≤ÊÉÖÂ†±
          </h3>

          {identityImageLoading ? (
            <div className="flex justify-center items-center h-32">
              <Loader className="w-8 h-8 animate-spin text-blue-600" />
              <span className="ml-2 text-gray-600">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</span>
            </div>
          ) : identityImageError ? (
            <div className="text-center py-8">
              <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
              <p className="text-red-600 mb-2">{identityImageError}</p>
              <Button
                variant="secondary"
                onClick={() => selectedPark && fetchOwnerIdentityData(selectedPark.owner_id)}
              >
                ÂÜçË™≠„ÅøËæº„Åø
              </Button>
            </div>
          ) : ownerIdentityData ? (
            <div className="space-y-6">

              {/* ÁôªÈå≤‰ΩèÊâÄÊÉÖÂ†±ÔºàÁÖßÂêàÁî®Ôºâ */}
              <div>
                <h4 className="font-medium mb-3 flex items-center">
                  <User className="w-4 h-4 mr-2" />
                  ÁôªÈå≤‰ΩèÊâÄÊÉÖÂ†±ÔºàÁÖßÂêàÁî®Ôºâ
                </h4>
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Ê∞èÂêç</p>
                      <p className="font-medium text-blue-900">{ownerIdentityData.owner_name}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">ÈÉµ‰æøÁï™Âè∑</p>
                      <p className="font-medium text-blue-900">{ownerIdentityData.postal_code}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">‰ΩèÊâÄ</p>
                      <p className="font-medium text-blue-900">{ownerIdentityData.address}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">ÈõªË©±Áï™Âè∑</p>
                      <p className="font-medium text-blue-900">{ownerIdentityData.phone_number}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û */}
              {ownerIdentityData.identity_document_url ? (
                <div>
                  <h4 className="font-medium mb-3 flex items-center">
                    <FileText className="w-4 h-4 mr-2" />
                    Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û
                  </h4>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm mb-4">
                      <div>
                        <p className="text-gray-600">„Éï„Ç°„Ç§„É´Âêç</p>
                        <p className="font-medium">{ownerIdentityData.identity_document_filename}</p>
                      </div>
                      <div>
                        <p className="text-gray-600">„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊó•</p>
                        <p className="font-medium">
                          {new Date(ownerIdentityData.identity_created_at).toLocaleDateString('ja-JP')}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-600">ÂØ©ÊüªÁä∂Ê≥Å</p>
                        <p className={`font-medium ${ownerIdentityData.identity_status === 'verified' ? 'text-green-600' :
                          ownerIdentityData.identity_status === 'failed' ? 'text-red-600' : 'text-yellow-600'
                          }`}>
                          {ownerIdentityData.identity_status === 'verified' ? 'ÊâøË™çÊ∏à„Åø' :
                            ownerIdentityData.identity_status === 'failed' ? 'Âç¥‰∏ã' : 'ÂØ©ÊüªÂæÖ„Å°'}
                        </p>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûÁîªÂÉè</p>
                      <div className="relative inline-block">
                        <img
                          src={`${supabase.storage.from('vaccine-certs').getPublicUrl(ownerIdentityData.identity_document_url).data.publicUrl}`}
                          alt="Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û"
                          className="max-w-full h-auto max-h-96 rounded-lg border shadow-sm cursor-pointer hover:shadow-md transition-shadow"
                          onClick={() => setEnlargedImage(ownerIdentityData.identity_document_url)}
                          onError={(e) => {
                            console.error('‚ùå ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', ownerIdentityData.identity_document_url);
                            e.currentTarget.src = 'https://via.placeholder.com/400x300?text=Image+Not+Available';
                          }}
                        />
                        <div className="absolute bottom-2 right-2">
                          <span className="px-2 py-1 bg-white bg-opacity-90 text-gray-800 text-xs rounded border shadow-sm">
                            „ÇØ„É™„ÉÉ„ÇØ„ÅßÊã°Â§ß
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* ÁÖßÂêà„ÉÅ„Çß„ÉÉ„ÇØÁî®„É°„ÉÉ„Çª„Éº„Ç∏ */}
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                      <div className="flex items-start">
                        <AlertTriangle className="w-5 h-5 text-yellow-600 mr-2 mt-0.5" />
                        <div>
                          <p className="text-sm font-medium text-yellow-800">ÁÖßÂêà„ÉÅ„Çß„ÉÉ„ÇØ</p>
                          <p className="text-sm text-yellow-700">
                            Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Å´Ë®òËºâ„Åï„Çå„Åü‰ΩèÊâÄ„ÉªÊ∞èÂêç„Å®„ÄÅ‰∏äË®ò„ÅÆÁôªÈå≤ÊÉÖÂ†±„Åå‰∏ÄËá¥„Åô„Çã„Åã„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div>
                  <h4 className="font-medium mb-3 flex items-center">
                    <FileText className="w-4 h-4 mr-2" />
                    Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û
                  </h4>
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div className="flex items-start">
                      <AlertTriangle className="w-5 h-5 text-red-600 mr-2 mt-0.5" />
                      <div>
                        <p className="text-sm font-medium text-red-800">
                          {ownerIdentityData.identity_status === 'not_submitted' ? 'Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅåÊú™ÊèêÂá∫„Åß„Åô' : 'Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'}
                        </p>
                        <p className="text-sm text-red-700 mt-1">
                          {ownerIdentityData.identity_status === 'not_submitted'
                            ? '„Åì„ÅÆ„Éâ„ÉÉ„Ç∞„É©„É≥Áî≥Ë´ã„Å´„ÅØÊú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅåÊ∑ª‰ªò„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇÁî≥Ë´ãËÄÖ„Å´Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÊèêÂá∫„Çí‰æùÈ†º„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
                            : '„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„Åæ„Åü„ÅØÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ'
                          }
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-8">
              <p className="text-gray-600">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
            </div>
          )}
        </Card>

        {/* ÁîªÂÉè‰∏ÄË¶ß */}
        {(selectedPark.status === 'second_stage_review' || selectedPark.status === 'first_stage_passed' || selectedPark.total_images > 0) && (
          <Card className="p-6">
            <h3 className="font-semibold mb-4">ÊñΩË®≠ÁîªÂÉè</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="bg-blue-50 p-3 rounded text-center">
                <p className="font-medium text-blue-800">ÂÖ®ÁîªÂÉè</p>
                <p className="text-blue-600">{selectedPark.total_images}Êûö</p>
              </div>
              <div className="bg-yellow-50 p-3 rounded text-center">
                <p className="font-medium text-yellow-800">ÂØ©ÊüªÂæÖ„Å°</p>
                <p className="text-yellow-600">{selectedPark.pending_images}Êûö</p>
              </div>
              <div className="bg-green-50 p-3 rounded text-center">
                <p className="font-medium text-green-800">ÊâøË™çÊ∏à„Åø</p>
                <p className="text-green-600">{selectedPark.approved_images}Êûö</p>
              </div>
              <div className="bg-red-50 p-3 rounded text-center">
                <p className="font-medium text-red-800">Âç¥‰∏ã</p>
                <p className="text-red-600">{selectedPark.rejected_images}Êûö</p>
              </div>
            </div>

            {/* „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†± */}
            <div className="mb-4 p-3 bg-gray-50 rounded text-sm">
              <p><strong>„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±:</strong></p>
              <p>Park ID: {selectedPark.id}</p>
              <p>Status: {selectedPark.status}</p>
              <p>Images Loading: {parkImages.isLoading ? 'Yes' : 'No'}</p>
              <p>Images Count: {parkImages.parkImages.length}</p>
              <p>Images Error: {parkImages.error || 'None'}</p>
              <p>Expected Total: {selectedPark.total_images}</p>
              <div className="mt-2 flex space-x-2">
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() => {
                    console.log('üîÑ Manual refresh triggered for park:', selectedPark.id);
                    void parkImages.fetchParkImages(selectedPark.id);
                  }}
                >
                  ÁîªÂÉèÂÜçÂèñÂæó
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={async () => {
                    console.log('üóÉÔ∏è Direct database query for park:', selectedPark.id);
                    try {
                      const { data, error } = await supabase
                        .from('dog_park_facility_images')
                        .select('*')
                        .eq('park_id', selectedPark.id);

                      if (error) {
                        console.error('‚ùå Direct query error:', error);
                      } else {
                        console.log('üìã Direct query result:', data);
                        alert('„Éá„Éº„Çø„Éô„Éº„ÇπÁõ¥Êé•„ÇØ„Ç®„É™ÁµêÊûú„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Âá∫Âäõ„Åó„Åæ„Åó„Åü');
                      }
                    } catch (err) {
                      console.error('‚ùå Direct query failed:', err);
                    }
                  }}
                >
                  DBÁõ¥Êé•Á¢∫Ë™ç
                </Button>
              </div>
              <div className="mt-2">
                <p><strong>Raw Images Data:</strong></p>
                <pre className="text-xs bg-white p-2 rounded border max-h-32 overflow-y-auto">
                  {JSON.stringify(parkImages.parkImages, null, 2)}
                </pre>
              </div>
            </div>

            {parkImages.isLoading ? (
              <div className="flex justify-center items-center h-32">
                <Loader className="w-8 h-8 animate-spin text-blue-600" />
                <span className="ml-2 text-gray-600">ÁîªÂÉè„ÇíË™≠„ÅøËæº„Åø‰∏≠...</span>
              </div>
            ) : parkImages.error ? (
              <div className="text-center py-8">
                <p className="text-red-600 mb-2">ÁîªÂÉè„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</p>
                <p className="text-gray-500 text-sm">{parkImages.error}</p>
                <Button
                  variant="secondary"
                  onClick={() => void parkImages.fetchParkImages(selectedPark.id)}
                  className="mt-4"
                >
                  ÂÜçË™≠„ÅøËæº„Åø
                </Button>
              </div>
            ) : parkImages.parkImages.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-600">„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„ÅüÁîªÂÉè„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                <p className="text-gray-500 text-sm">„Éë„Éº„ÇØ„Çπ„ÉÜ„Éº„Çø„Çπ: {selectedPark.status}</p>
                <p className="text-gray-500 text-sm">ÊúüÂæÖ„Åï„Çå„ÇãÁîªÂÉèÊï∞: {selectedPark.total_images}</p>
                <Button
                  variant="secondary"
                  onClick={() => {
                    console.log('üîÑ Manual refresh triggered for park:', selectedPark.id);
                    void parkImages.fetchParkImages(selectedPark.id);
                  }}
                  className="mt-4"
                >
                  ÊâãÂãï„Åß„É™„Éï„É¨„ÉÉ„Ç∑„É•
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {parkImages.parkImages.map((image, index) => (
                  <div key={image.id} className="relative group">
                    <div className="relative overflow-hidden rounded-lg bg-gray-100">
                      <img
                        src={image.image_url}
                        alt={getImageTypeLabel(image.image_type)}
                        className="w-full h-48 object-cover cursor-pointer hover:scale-105 transition-transform duration-200"
                        onClick={() => handleImageSelect(image)}
                        onLoad={() => console.log(`üñºÔ∏è Image ${index + 1} loaded successfully:`, image.image_url)}
                        onError={(e) => {
                          console.error(`‚ùå Image ${index + 1} failed to load:`, image.image_url);
                          e.currentTarget.src = 'https://via.placeholder.com/400x300?text=Image+Not+Available';
                        }}
                      />

                      {/* Êã°Â§ß„Ç¢„Ç§„Ç≥„É≥ */}
                      <div
                        className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center cursor-pointer"
                        onClick={(e) => {
                          e.stopPropagation();
                          setEnlargedImage(image.image_url);
                        }}
                      >
                        <ZoomIn className="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
                      </div>
                    </div>

                    {/* „Çπ„ÉÜ„Éº„Çø„Çπ„Éê„ÉÉ„Ç∏ */}
                    <div className="absolute top-2 right-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${image.is_approved === true
                        ? 'bg-green-100 text-green-800'
                        : image.is_approved === false
                          ? 'bg-red-100 text-red-800'
                          : 'bg-yellow-100 text-yellow-800'
                        }`}>
                        {image.is_approved === true
                          ? 'ÊâøË™çÊ∏à„Åø'
                          : image.is_approved === false
                            ? 'Âç¥‰∏ã'
                            : 'ÂØ©ÊüªÂæÖ„Å°'}
                      </span>
                    </div>

                    {/* ÁîªÂÉè„Çø„Ç§„Éó„É©„Éô„É´ */}
                    <div className="absolute bottom-2 left-2">
                      <span className="px-2 py-1 bg-white bg-opacity-90 text-gray-800 text-xs rounded border shadow-sm">
                        {getImageTypeLabel(image.image_type)}
                      </span>
                    </div>

                    {/* ÁÆ°ÁêÜËÄÖ„Éé„Éº„ÉàÔºàÂç¥‰∏ã„ÅÆÂ†¥ÂêàÔºâ */}
                    {image.is_approved === false && image.admin_notes && (
                      <div className="mt-2 p-2 bg-red-50 rounded text-sm">
                        <p className="text-red-800 font-medium">Âç¥‰∏ãÁêÜÁî±:</p>
                        <p className="text-red-700">{image.admin_notes}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </Card>
        )}

        {/* ÂØ©ÊüªÁµêÊûú */}
        <Card className="p-6">
          <h3 className="font-semibold mb-4">ÂØ©ÊüªÁµêÊûú</h3>

          {/* ÂØ©ÊüªÂà§Êñ≠„ÅÆÊîØÊè¥ÊÉÖÂ†± */}
          <div className="mb-4">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-medium text-blue-900 mb-2">ÂØ©Êüª„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà</h4>
              <div className="space-y-2 text-sm">
                <div className="flex items-center">
                  <span className={`w-4 h-4 rounded-full mr-2 ${ownerIdentityData?.owner_name && ownerIdentityData.owner_name !== 'ÂêçÂâçÊú™ÁôªÈå≤'
                    ? 'bg-green-500' : 'bg-red-500'
                    }`}></span>
                  <span>ÁôªÈå≤Ê∞èÂêç: {ownerIdentityData?.owner_name || 'Êú™ÁôªÈå≤'}</span>
                </div>
                <div className="flex items-center">
                  <span className={`w-4 h-4 rounded-full mr-2 ${ownerIdentityData?.address && ownerIdentityData.address !== 'Êú™ÁôªÈå≤'
                    ? 'bg-green-500' : 'bg-red-500'
                    }`}></span>
                  <span>ÁôªÈå≤‰ΩèÊâÄ: {ownerIdentityData?.address || 'Êú™ÁôªÈå≤'}</span>
                </div>
                <div className="flex items-center">
                  <span className={`w-4 h-4 rounded-full mr-2 ${ownerIdentityData?.phone_number && ownerIdentityData.phone_number !== 'Êú™ÁôªÈå≤'
                    ? 'bg-green-500' : 'bg-red-500'
                    }`}></span>
                  <span>ÈõªË©±Áï™Âè∑: {ownerIdentityData?.phone_number || 'Êú™ÁôªÈå≤'}</span>
                </div>
                <div className="flex items-center">
                  <span className={`w-4 h-4 rounded-full mr-2 ${ownerIdentityData?.identity_document_url
                    ? 'bg-green-500' : 'bg-red-500'
                    }`}></span>
                  <span>Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û: {ownerIdentityData?.identity_document_url ? 'ÊèêÂá∫Ê∏à„Åø' : 'Êú™ÊèêÂá∫'}</span>
                </div>
                {ownerIdentityData?.identity_document_url && (
                  <div className="flex items-center">
                    <span className={`w-4 h-4 rounded-full mr-2 ${ownerIdentityData.identity_status === 'verified' ? 'bg-green-500' :
                      ownerIdentityData.identity_status === 'failed' ? 'bg-red-500' : 'bg-yellow-500'
                      }`}></span>
                    <span>Êú¨‰∫∫Á¢∫Ë™çÁä∂Ê≥Å: {
                      ownerIdentityData.identity_status === 'verified' ? 'ÊâøË™çÊ∏à„Åø' :
                        ownerIdentityData.identity_status === 'failed' ? 'Âç¥‰∏ã' : 'ÂØ©ÊüªÂæÖ„Å°'
                    }</span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* ÂØ©ÊüªÂà§Êñ≠„ÅÆÊé®Â•®‰∫ãÈ†Ö */}
          {(!ownerIdentityData?.identity_document_url || ownerIdentityData.identity_status === 'not_submitted') && (
            <div className="mb-4">
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start">
                  <AlertTriangle className="w-5 h-5 text-yellow-600 mr-2 mt-0.5" />
                  <div>
                    <p className="text-sm font-medium text-yellow-800">ÂØ©ÊüªÂà§Êñ≠„ÅÆÊé®Â•®‰∫ãÈ†Ö</p>
                    <p className="text-sm text-yellow-700 mt-1">
                      Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅåÊú™ÊèêÂá∫„ÅÆ„Åü„ÇÅ„ÄÅÁî≥Ë´ã„ÇíÊâøË™ç„Åô„ÇãÂâç„Å´Áî≥Ë´ãËÄÖ„Å´Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÊèêÂá∫„Çí‰æùÈ†º„Åô„Çã„Åì„Å®„ÇíÊé®Â•®„Åó„Åæ„Åô„ÄÇ
                      „Åæ„Åü„ÅØ„ÄÅ‰∏çÂÇô„Å®„Åó„Å¶‰∏ÄÊôÇÁöÑ„Å´Âç¥‰∏ã„Åó„ÄÅÂøÖË¶ÅÊõ∏È°û„ÅÆÊèêÂá∫„ÇíÊ±Ç„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Âç¥‰∏ãÁêÜÁî±ÔºàÂç¥‰∏ã„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÂÖ•ÂäõÔºâ
            </label>
            <textarea
              value={rejectionNote}
              onChange={(e) => setRejectionNote(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={4}
              placeholder="‰æã: Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅåÊú™ÊèêÂá∫„ÅÆ„Åü„ÇÅ„ÄÅË∫´ÂÖÉÁ¢∫Ë™ç„Åå„Åß„Åç„Åæ„Åõ„Çì„ÄÇÊú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûÔºàÈÅãËª¢ÂÖçË®±Ë®º„ÄÅ„Éë„Çπ„Éù„Éº„Éà„ÄÅ„Éû„Ç§„Éä„É≥„Éê„Éº„Ç´„Éº„Éâ„Å™„Å©Ôºâ„ÇíÊèêÂá∫„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶Áî≥Ë´ã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
            />
          </div>

          <div className="flex justify-end space-x-3">
            <Button
              onClick={() => void handleParkApproval(selectedPark.id, false)}
              isLoading={approval.isProcessing}
              className="bg-red-600 hover:bg-red-700"
            >
              <X className="w-4 h-4 mr-2" />
              Âç¥‰∏ã
            </Button>
            <Button
              onClick={() => void handleParkApproval(selectedPark.id, true)}
              isLoading={approval.isProcessing}
              className="bg-green-600 hover:bg-green-700"
              disabled={!ownerIdentityData?.identity_document_url && ownerIdentityData?.identity_status === 'not_submitted'}
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              ÊâøË™ç
            </Button>
            <Button
              onClick={() => void handleParkDelete(selectedPark.id)}
              isLoading={approval.isProcessing}
              className="bg-red-600 hover:bg-red-700"
            >
              <X className="w-4 h-4 mr-2" />
              ÂâäÈô§
            </Button>
          </div>
        </Card>

        {/* Êã°Â§ßÁîªÂÉèË°®Á§∫„É¢„Éº„ÉÄ„É´ */}
        {enlargedImage && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="relative max-w-4xl max-h-full p-4">
              <img
                src={enlargedImage.startsWith('http') ? enlargedImage : `${supabase.storage.from('vaccine-certs').getPublicUrl(enlargedImage).data.publicUrl}`}
                alt="Êã°Â§ßÁîªÂÉè"
                className="max-w-full max-h-full object-contain"
              />
              <Button
                onClick={() => setEnlargedImage(null)}
                className="absolute top-2 right-2 bg-white text-black hover:bg-gray-100"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>
        )}
      </div>
    );
  }

  // ‰∏ÄË¶ßË°®Á§∫„É¢„Éº„Éâ
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold flex items-center">
          <MapPin className="w-6 h-6 text-blue-600 mr-2" />
          „Éâ„ÉÉ„Ç∞„É©„É≥ÂØ©ÊüªÁÆ°ÁêÜ
        </h2>
        <div className="text-sm text-gray-600">
          ÂØ©ÊüªÂæÖ„Å°: {pendingParks.length}‰ª∂
        </div>
      </div>

      {/* ÂØ©Êüª„Éó„É≠„Çª„ÇπË™¨Êòé */}
      <Card className="bg-blue-50 border-blue-200">
        <div className="p-4">
          <h3 className="font-semibold text-blue-900 mb-3">ÂØ©Êüª„Éó„É≠„Çª„ÇπÊ¶ÇË¶Å</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="w-8 h-8 bg-yellow-600 text-white rounded-full flex items-center justify-center text-sm font-bold mx-auto mb-2">1</div>
              <div className="text-sm font-medium text-blue-900">Á¨¨‰∏ÄÂØ©Êüª</div>
              <div className="text-xs text-blue-700">Âü∫Êú¨ÊÉÖÂ†±„ÉªÊú¨‰∫∫Á¢∫Ë™ç</div>
            </div>
            <div className="text-center">
              <div className="w-8 h-8 bg-orange-600 text-white rounded-full flex items-center justify-center text-sm font-bold mx-auto mb-2">2</div>
              <div className="text-sm font-medium text-blue-900">Á¨¨‰∫åÂØ©Êüª</div>
              <div className="text-xs text-blue-700">ÊñΩË®≠ÁîªÂÉè„ÉªË©≥Á¥∞ÂØ©Êüª</div>
            </div>
            <div className="text-center">
              <div className="w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center text-sm font-bold mx-auto mb-2">3</div>
              <div className="text-sm font-medium text-blue-900">ÂÆüË®ºÊ§úÊüª</div>
              <div className="text-xs text-blue-700">„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÁ¢∫Ë™ç</div>
            </div>
            <div className="text-center">
              <div className="w-8 h-8 bg-green-600 text-white rounded-full flex items-center justify-center text-sm font-bold mx-auto mb-2">4</div>
              <div className="text-sm font-medium text-blue-900">ÂÖ¨ÈñãÊâøË™ç</div>
              <div className="text-xs text-blue-700">‰∏ÄËà¨ÂÖ¨ÈñãÈñãÂßã</div>
            </div>
          </div>
        </div>
      </Card>

      {/* „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂâäÈô§„Åó„ÄÅ‰ª£„Çè„Çä„Å´Áµ±Ë®àÊÉÖÂ†±„ÇíË°®Á§∫ */}
      {pendingParks.length > 0 && (
        <Card className="bg-gray-50">
          <div className="p-4">
            <h3 className="font-medium mb-3">ÂØ©ÊüªÁä∂Ê≥ÅÁµ±Ë®à</h3>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm">
              <div className="text-center">
                <div className="text-lg font-bold text-yellow-600">
                  {pendingParks.filter(p => p.status === 'pending').length}
                </div>
                <div className="text-gray-600">Á¨¨‰∏ÄÂØ©Êüª‰∏≠</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-orange-600">
                  {pendingParks.filter(p => p.status === 'second_stage_waiting').length}
                </div>
                <div className="text-gray-600">Á¨¨‰∫åÂØ©ÊüªÂæÖ„Å°</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-purple-600">
                  {pendingParks.filter(p => p.status === 'second_stage_review').length}
                </div>
                <div className="text-gray-600">Á¨¨‰∫åÂØ©Êüª‰∏≠</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-indigo-600">
                  {pendingParks.filter(p => p.status === 'smart_lock_testing').length}
                </div>
                <div className="text-gray-600">ÂÆüË®ºÊ§úÊüª‰∏≠</div>
              </div>
              <div className="text-center">
                <div className="text-lg font-bold text-green-600">
                  {pendingParks.filter(p => p.status === 'approved').length}
                </div>
                <div className="text-gray-600">ÊâøË™çÊ∏à„Åø</div>
              </div>
            </div>
          </div>
        </Card>
      )}

      {pendingParks.length === 0 ? (
        <Card className="text-center py-12">
          <CheckCircle className="w-16 h-16 text-green-600 mx-auto mb-4" />
          <p className="text-gray-600">ÂØ©ÊüªÂæÖ„Å°„ÅÆ„Éâ„ÉÉ„Ç∞„É©„É≥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
        </Card>
      ) : (
        <div className="space-y-4">
          {pendingParks.map((park) => {
            const getStatusConfig = (status: string) => {
              switch (status) {
                case 'pending':
                  return {
                    color: 'bg-yellow-100 text-yellow-800 border-yellow-300',
                    label: 'Á¨¨‰∏ÄÂØ©Êüª‰∏≠',
                    description: 'Âü∫Êú¨ÊÉÖÂ†±„Å®Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    action: 'ÊâøË™ç„Åæ„Åü„ÅØÂç¥‰∏ã'
                  };
                case 'second_stage_waiting':
                  return {
                    color: 'bg-orange-100 text-orange-800 border-orange-300',
                    label: 'Á¨¨‰∫åÂØ©ÊüªÊèêÂá∫ÂæÖ„Å°',
                    description: '„Ç™„Éº„Éä„Éº„ÅåÁ¨¨‰∫åÂØ©ÊüªÊõ∏È°û„ÇíÊèêÂá∫„Åô„Çã„Åæ„ÅßÂæÖÊ©ü',
                    action: 'ÂæÖÊ©ü‰∏≠'
                  };
                case 'second_stage_review':
                  return {
                    color: 'bg-purple-100 text-purple-800 border-purple-300',
                    label: 'Á¨¨‰∫åÂØ©Êüª‰∏≠',
                    description: 'ÊñΩË®≠ÁîªÂÉè„Å®Ë©≥Á¥∞ÊÉÖÂ†±„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
                    action: 'ÁîªÂÉèÂØ©Êüª„ÉªÊâøË™ç'
                  };
                case 'smart_lock_testing':
                  return {
                    color: 'bg-indigo-100 text-indigo-800 border-indigo-300',
                    label: '„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂÆüË®ºÊ§úÊüª‰∏≠',
                    description: 'ÂÆüÈöõ„ÅÆÊñΩË®≠„Åß„ÅÆ„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂãï‰ΩúÁ¢∫Ë™ç',
                    action: 'ÂÆüË®ºÊ§úÊüªÂÆå‰∫Ü'
                  };
                default:
                  return {
                    color: 'bg-gray-100 text-gray-800 border-gray-300',
                    label: status,
                    description: '',
                    action: ''
                  };
              }
            };

            const statusConfig = getStatusConfig(park.status);

            return (
              <Card key={park.id} className={`p-6 border-2 ${statusConfig.color.includes('border') ? statusConfig.color : statusConfig.color + ' border-gray-200'}`}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h3 className="text-lg font-semibold">{park.name}</h3>
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${statusConfig.color}`}>
                        {statusConfig.label}
                      </span>
                    </div>
                    <div className="space-y-1 text-sm text-gray-600 mb-3">
                      <p><MapPin className="w-4 h-4 inline mr-1" />{park.address}</p>
                      <p><User className="w-4 h-4 inline mr-1" />„Ç™„Éº„Éä„Éº: {park.owner_name}</p>
                    </div>
                    <div className="bg-white p-3 rounded-lg border">
                      <p className="text-sm font-medium text-gray-700 mb-1">ÁèæÂú®„ÅÆÂØ©ÊüªÁä∂Ê≥Å</p>
                      <p className="text-sm text-gray-600">{statusConfig.description}</p>
                      {statusConfig.action && (
                        <p className="text-sm font-medium text-blue-600 mt-2">
                          Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥: {statusConfig.action}
                        </p>
                      )}
                    </div>
                  </div>
                  <div className="ml-4 flex flex-col space-y-2">
                    <Button
                      onClick={() => setSelectedPark(park)}
                      className="bg-blue-600 hover:bg-blue-700"
                      size="sm"
                    >
                      <Eye className="w-4 h-4 mr-2" />
                      Ë©≥Á¥∞Á¢∫Ë™ç
                    </Button>
                    <Button
                      onClick={() => void handleParkDelete(park.id)}
                      className="bg-red-600 hover:bg-red-700"
                      size="sm"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      ÂâäÈô§
                    </Button>
                    {park.status === 'second_stage_waiting' && (
                      <div className="text-xs text-gray-500 text-center">
                        „Ç™„Éº„Éä„Éº„ÅÆÊèêÂá∫ÂæÖ„Å°
                      </div>
                    )}
                  </div>
                </div>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}; 