import {
    AlertTriangle,
    Badge,
    BarChart4,
    Building,
    CheckCircle,
    DollarSign,
    Eye,
    FileText,
    Mail,
    Monitor,
    Settings,
    Shield,
    ShieldAlert,
    ShoppingBag,
    Users
} from 'lucide-react';
import { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import Button from '../components/Button';
import Card from '../components/Card';
import AdminMaintenanceManagementComponent from '../components/admin/AdminMaintenanceManagement';
import useAuth from '../context/AuthContext';
import { FraudDetectionResult, getFraudDetectionStats, getHighRiskUsers } from '../utils/adminFraudDetection';
import { supabase } from '../utils/supabase';
import AdminFacilityApproval from './AdminFacilityApproval';
import { AdminParkManagement } from './AdminParkManagement';
import AdminVaccineApproval from './AdminVaccineApproval';

interface AdminStats {
  totalUsers: number;
  totalParks: number;
  pendingParks: number;
  pendingVaccines: number;
  pendingFacilities: number;
  totalReservations: number;
  monthlyRevenue: number;
  lastMonthRevenue: number;
  totalSubscriptions: number;
  activeSubscriptions: number;
  newUsersThisMonth: number;
  unreadMessages: number;
}

interface AdminStatsResponse {
  total_users: number;
  total_parks: number;
  pending_parks: number;
  pending_vaccines: number;
  pending_facilities: number;
  total_reservations: number;
  monthly_revenue: number;
  last_month_revenue: number;
  total_subscriptions: number;
  active_subscriptions: number;
  new_users_this_month: number;
  unread_messages: number;
}

interface FraudStats {
  totalHighRiskUsers: number;
  totalMediumRiskUsers: number;
  recentDetections: number;
  blockedAttempts: number;
  trialAbuseCount: number;
}

export function AdminDashboard() {
  const { user, isAdmin } = useAuth();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState<'overview' | 'pages' | 'parks' | 'facilities' | 'users' | 'maintenance' | 'fraud' | 'sponsors' | 'vaccine-approval' | 'inquiries'>('overview');
  const [stats, setStats] = useState<AdminStats>({
    totalUsers: 0,
    totalParks: 0,
    pendingParks: 0,
    pendingVaccines: 0,
    pendingFacilities: 0,
    totalReservations: 0,
    monthlyRevenue: 0,
    lastMonthRevenue: 0,
    totalSubscriptions: 0,
    activeSubscriptions: 0,
    newUsersThisMonth: 0,
    unreadMessages: 0
  });
  const [isLoading, setIsLoading] = useState(true);
  const [processingError, setProcessingError] = useState('');
  const [processingSuccess, setProcessingSuccess] = useState('');
  // Êò†„Åà„Çπ„Éù„ÉÉ„ÉàÈÄöÂ†±
  const [spotReports, setSpotReports] = useState<Array<{ id: string; spot_id: string; reason: string; status: string; admin_note: string | null; created_at: string; spot?: { title?: string|null; address?: string|null; is_hidden?: boolean|null } }>>([]);
  const [loadingSpotReports, setLoadingSpotReports] = useState(false);
  const [showClosedReports, setShowClosedReports] = useState(false);

  // ‰∏çÊ≠£Ê§úÁü•Èñ¢ÈÄ£„ÅÆstate
  const [fraudStats, setFraudStats] = useState<FraudStats | null>(null);
  const [highRiskUsers, setHighRiskUsers] = useState<FraudDetectionResult[]>([]);

  useEffect(() => {
    // ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    if (!isAdmin) {
      navigate('/');
      return;
    }

    void fetchAdminData();
    void fetchEmergencyData();
    void fetchFraudStats();
    void fetchSpotReports();
  }, [isAdmin, navigate]);

  const fetchAdminData = async () => {
    try {
      setIsLoading(true);
      setProcessingError('');
      setProcessingSuccess('');

      // Áõ¥Êé•vaccine_certifications„ÉÜ„Éº„Éñ„É´„Åã„ÇâÊâøË™çÂæÖ„Å°‰ª∂Êï∞„ÇíÂèñÂæó
      const { count: vaccineCount, error: vaccineError } = await supabase
        .from('vaccine_certifications')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'pending');
      
      console.log('üîç „ÉØ„ÇØ„ÉÅ„É≥ÊâøË™çÂæÖ„Å°‰ª∂Êï∞ÔºàÁõ¥Êé•ÂèñÂæóÔºâ:', vaccineCount, '„Ç®„É©„Éº:', vaccineError);

      // ÁÆ°ÁêÜËÄÖÁµ±Ë®àÊÉÖÂ†±„ÇíÂèñÂæó
      const { data: statsData, error: statsError } = await supabase.rpc('get_admin_stats');

      if (statsError) throw statsError;

      const typedStatsData = statsData as AdminStatsResponse | null;

      console.log('üìä ÁÆ°ÁêÜËÄÖÁµ±Ë®à„Éá„Éº„Çø:', typedStatsData);

      if (typedStatsData) {
        // Áõ¥Êé•ÂèñÂæó„Åó„Åü„ÉØ„ÇØ„ÉÅ„É≥‰ª∂Êï∞„ÇíÂÑ™ÂÖàÁöÑ„Å´‰ΩøÁî®
        const actualPendingVaccines = vaccineCount !== null ? vaccineCount : (typedStatsData.pending_vaccines || 0);
        
        setStats({
          totalUsers: typedStatsData.total_users || 0,
          totalParks: typedStatsData.total_parks || 0,
          pendingParks: typedStatsData.pending_parks || 0,
          pendingVaccines: actualPendingVaccines,
          pendingFacilities: typedStatsData.pending_facilities || 0,
          totalReservations: typedStatsData.total_reservations || 0,
          monthlyRevenue: typedStatsData.monthly_revenue || 0,
          lastMonthRevenue: typedStatsData.last_month_revenue || 0,
          totalSubscriptions: typedStatsData.total_subscriptions || 0,
          activeSubscriptions: typedStatsData.active_subscriptions || 0,
          newUsersThisMonth: typedStatsData.new_users_this_month || 0,
          unreadMessages: typedStatsData.unread_messages || 0
        });
        
        console.log('üî¢ Áî≥Ë´ã‰∏≠‰ª∂Êï∞ - „Éâ„ÉÉ„Ç∞„É©„É≥:', typedStatsData.pending_parks, '„Åù„ÅÆ‰ªñÊñΩË®≠:', typedStatsData.pending_facilities, '„ÉØ„ÇØ„ÉÅ„É≥(RPC):', typedStatsData.pending_vaccines, '„ÉØ„ÇØ„ÉÅ„É≥(Áõ¥Êé•):', actualPendingVaccines);
      }

    } catch (error) {
      console.error('Error fetching admin data:', error);
      setProcessingError('ÁÆ°ÁêÜËÄÖ„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchEmergencyData = async () => {
    try {
      // ‰∏çÊ≠£Ê§úÁü•„ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
      const { data: tablesCheck, error: tablesError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .eq('table_name', 'fraud_detection_logs');

      if (tablesError || !tablesCheck || tablesCheck.length === 0) {
        console.warn('Fraud detection tables not found. Skipping fraud detection features.');
        setHighRiskUsers([]);
        return;
      }

      const [highRiskUsers] = await Promise.all([
        getHighRiskUsers()
      ]);

      setHighRiskUsers(highRiskUsers);
    } catch (error) {
      console.error('Error fetching emergency data:', error);
      setHighRiskUsers([]);
    }
  };

  const fetchFraudStats = async () => {
    try {
      // ‰∏çÊ≠£Ê§úÁü•„ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
      const { data: tablesCheck, error: tablesError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .eq('table_name', 'fraud_detection_logs');

      if (tablesError || !tablesCheck || tablesCheck.length === 0) {
        console.warn('Fraud detection tables not found. Skipping fraud statistics.');
        setFraudStats(null);
        return;
      }

      const stats = await getFraudDetectionStats();
      setFraudStats(stats);
    } catch (error) {
      console.error('Error fetching fraud stats:', error);
      setFraudStats(null);
    }
  };

  const fetchSpotReports = async () => {
    try {
      setLoadingSpotReports(true);
      // 1) ÈÄöÂ†±‰∏ÄË¶ß
      const { data: reports, error: rErr } = await supabase
        .from('spot_reports')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(100);
      if (rErr) throw rErr;
      const list = reports || [];
      // 2) Èñ¢ÈÄ£„Çπ„Éù„ÉÉ„Éà
      const ids = Array.from(new Set(list.map((r: any) => r.spot_id).filter(Boolean)));
      let spotMap: Record<string, { title?: string; address?: string; is_hidden?: boolean }> = {};
      if (ids.length > 0) {
        const { data: spotsData } = await supabase
          .from('spots')
          .select('id,title,address,is_hidden')
          .in('id', ids);
        (spotsData || []).forEach((s: any) => { spotMap[s.id] = { title: s.title, address: s.address, is_hidden: s.is_hidden }; });
      }
      setSpotReports(list.map((r: any) => ({ ...r, spot: spotMap[r.spot_id] })));
    } catch (e) {
      console.error('Failed to fetch spot reports', e);
    } finally {
      setLoadingSpotReports(false);
    }
  };

  const closeReport = async (id: string) => {
    try {
      const { error } = await supabase.from('spot_reports').update({ status: 'closed' }).eq('id', id);
      if (error) throw error;
      await fetchSpotReports();
    } catch (e) {
      console.error('closeReport error', e);
    }
  };

  const saveAdminNote = async (id: string, note: string) => {
    try {
      const { error } = await supabase.from('spot_reports').update({ admin_note: note }).eq('id', id);
      if (error) throw error;
      await fetchSpotReports();
    } catch (e) {
      console.error('saveAdminNote error', e);
    }
  };

  const toggleSpotHidden = async (spotId: string, hide: boolean) => {
    try {
      const { error } = await supabase.from('spots').update({ is_hidden: hide }).eq('id', spotId);
      if (error) throw error;
      await fetchSpotReports();
    } catch (e) {
      console.error('toggleSpotHidden error', e);
    }
  };

  const calculateRevenueGrowth = () => {
    if (stats.lastMonthRevenue === 0) return 0;
    return ((stats.monthlyRevenue - stats.lastMonthRevenue) / stats.lastMonthRevenue) * 100;
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY',
    }).format(amount);
  };

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="p-8 text-center">
          <Shield className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">„Ç¢„ÇØ„Çª„ÇπÊãíÂê¶</h1>
          <p className="text-gray-600">ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ</p>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                <Settings className="w-8 h-8 text-blue-600 mr-3" />
                ÁÆ°ÁêÜËÄÖ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
              </h1>
              <p className="text-gray-600">„Ç∑„Çπ„ÉÜ„É†ÂÖ®‰Ωì„ÅÆÁõ£Ë¶ñ„Å®ÁÆ°ÁêÜ</p>
            </div>
            <div className="flex items-center">
              <span className="text-sm text-gray-600">
                ÁÆ°ÁêÜËÄÖ: {user?.email}
              </span>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* „Ç®„É©„Éº„ÉªÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏ */}
        {processingError && (
          <div className="bg-red-100 border border-red-300 text-red-800 rounded-lg p-4 mb-6">
            <AlertTriangle className="w-5 h-5 inline mr-2" />
            {processingError}
          </div>
        )}

        {processingSuccess && (
          <div className="bg-green-100 border border-green-300 text-green-800 rounded-lg p-4 mb-6">
            <CheckCircle className="w-5 h-5 inline mr-2" />
            {processingSuccess}
          </div>
        )}

        {/* Á∑äÊÄ•ÂØæÂøú„ÅåÂøÖË¶Å„Å™È†ÖÁõÆ */}
        {(stats.pendingParks > 0 || stats.pendingVaccines > 0 || stats.pendingFacilities > 0 || (fraudStats?.totalHighRiskUsers || 0) > 0) && (
          <Card className="p-6 mb-6 border-red-200 bg-red-50">
            <h2 className="text-lg font-semibold text-red-900 mb-4 flex items-center">
              <AlertTriangle className="w-6 h-6 text-red-600 mr-2" />
              Á∑äÊÄ•ÂØæÂøú„ÅåÂøÖË¶Å„Å™È†ÖÁõÆ
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              {stats.pendingParks > 0 && (
                <Link to="/admin/parks" className="block">
                  <div className="bg-white rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">ÊâøË™çÂæÖ„Å°„Éâ„ÉÉ„Ç∞„É©„É≥</p>
                        <p className="text-2xl font-bold text-red-600">{stats.pendingParks}</p>
                      </div>
                      <Building className="w-8 h-8 text-red-500" />
                    </div>
                  </div>
                </Link>
              )}

              {stats.pendingVaccines > 0 && (
                <Link to="/admin/vaccine-approval" className="block">
                  <div className="bg-white rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">„ÉØ„ÇØ„ÉÅ„É≥Ë®ºÊòéÊõ∏ÊâøË™çÂæÖ„Å°</p>
                        <p className="text-2xl font-bold text-red-600">{stats.pendingVaccines}</p>
                      </div>
                      <Shield className="w-8 h-8 text-red-500" />
                    </div>
                  </div>
                </Link>
              )}

              {/* ÊñΩË®≠ÊâøË™çÁÆ°ÁêÜ - Â∏∏ÊôÇË°®Á§∫ */}
              <Link to="/admin/facility-approval" className="block">
                <div className="bg-white rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">ÊñΩË®≠ÊâøË™çÁÆ°ÁêÜ</p>
                      <p className={`text-2xl font-bold ${stats.pendingFacilities > 0 ? 'text-red-600' : 'text-green-600'}`}>
                        {stats.pendingFacilities > 0 ? stats.pendingFacilities : '0'}
                      </p>
                      <p className="text-xs text-gray-500">
                        {stats.pendingFacilities > 0 ? '‰ª∂„ÅÆÊâøË™çÂæÖ„Å°' : 'ÊâøË™çÂæÖ„Å°„Å™„Åó'}
                      </p>
                    </div>
                    <Building className={`w-8 h-8 ${stats.pendingFacilities > 0 ? 'text-red-500' : 'text-green-500'}`} />
                  </div>
                </div>
              </Link>

              {(fraudStats?.totalHighRiskUsers || 0) > 0 && (
                <Link to="/admin/users?filter=high_risk" className="block">
                  <div className="bg-white rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-600">È´ò„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº</p>
                        <p className="text-2xl font-bold text-red-600">{fraudStats?.totalHighRiskUsers || 0}</p>
                      </div>
                      <ShieldAlert className="w-8 h-8 text-red-500" />
                    </div>
                  </div>
                </Link>
              )}

              {/* Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏ */}
              <Link to="/admin/inquiries" className="block">
                <div className="bg-white rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏</p>
                      <p className="text-2xl font-bold text-blue-600">{stats.unreadMessages || 0}</p>
                    </div>
                    <Mail className="w-8 h-8 text-blue-500" />
                  </div>
                </div>
              </Link>
            </div>

            {/* È´ò„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº„ÅÆË©≥Á¥∞ */}
            {highRiskUsers.length > 0 && (
              <div className="mt-6">
                <h3 className="text-md font-semibold text-red-900 mb-3">ÊúÄÊñ∞„ÅÆÈ´ò„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº</h3>
                <div className="bg-white rounded-lg overflow-hidden">
                  <table className="min-w-full">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">„É¶„Éº„Ç∂„Éº</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">„É™„Çπ„ÇØ„Çπ„Ç≥„Ç¢</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Ê§úÁü•„Çø„Ç§„Éó</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">ÊúÄÁµÇÊ§úÁü•</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">„Ç¢„ÇØ„Ç∑„Éß„É≥</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {highRiskUsers.map((user) => (
                        <tr key={user.userId} className="hover:bg-gray-50">
                          <td className="px-4 py-2">
                            <div>
                              <div className="text-sm font-medium text-gray-900">{user.userName}</div>
                              <div className="text-sm text-gray-500">{user.email}</div>
                            </div>
                          </td>
                          <td className="px-4 py-2">
                            <span className={`inline-flex items-center px-2 py-1 text-xs font-medium rounded-full ${
                              user.riskLevel === 'high' ? 'bg-red-100 text-red-800' :
                              user.riskLevel === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-green-100 text-green-800'
                            }`}>
                              {user.riskScore}
                            </span>
                          </td>
                          <td className="px-4 py-2">
                            <div className="text-sm text-gray-900">
                              {user.detectionTypes.join(', ')}
                            </div>
                          </td>
                          <td className="px-4 py-2">
                            <div className="text-sm text-gray-900">
                              {new Date(user.lastDetection).toLocaleDateString('ja-JP')}
                            </div>
                          </td>
                          <td className="px-4 py-2">
                            <Link to={`/admin/users?filter=high_risk`}>
                              <Button variant="secondary" size="sm">
                                <Eye className="w-4 h-4 mr-1" />
                                Ë©≥Á¥∞
                              </Button>
                            </Link>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </Card>
        )}

        {/* „Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ - 2ÊÆµË°®Á§∫ */}
        <div className="space-y-2 mb-6">
          {/* 1ÊÆµÁõÆ */}
          <div className="flex flex-wrap gap-2">
            {[
              { id: 'overview', label: 'Ê¶ÇË¶Å', icon: BarChart4 },
              { id: 'pages', label: '„Éö„Éº„Ç∏ÁÆ°ÁêÜ', icon: FileText },
              { id: 'parks', label: '„Éâ„ÉÉ„Ç∞„É©„É≥', icon: Building, badge: stats.pendingParks },
              { id: 'facilities', label: '„Åù„ÅÆ‰ªñÊñΩË®≠', icon: Building, badge: stats.pendingFacilities },
              { id: 'users', label: '„É¶„Éº„Ç∂„Éº', icon: Users },
              { id: 'vaccine-approval', label: '„ÉØ„ÇØ„ÉÅ„É≥', icon: Shield, badge: stats.pendingVaccines }
            ].map((tab) => {
              const Icon = tab.icon;
              const hasBadge = tab.badge !== undefined && tab.badge > 0;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as typeof activeTab)}
                  className={`relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                    activeTab === tab.id
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  <span>{tab.label}</span>
                  {hasBadge && (
                    <span className="ml-2 inline-flex items-center justify-center text-white text-xs font-bold rounded-full min-w-[22px] h-[22px] px-1.5 bg-red-500 shadow-lg animate-pulse">
                      {tab.badge}
                    </span>
                  )}
                </button>
              );
            })}
          </div>
          
          {/* 2ÊÆµÁõÆ */}
          <div className="flex flex-wrap gap-2">
            {[
              { id: 'fraud', label: '‰∏çÊ≠£Ê§úÁü•', icon: ShieldAlert },
              { id: 'maintenance', label: '„É°„É≥„ÉÜ„Éä„É≥„Çπ', icon: Settings },
              { id: 'sponsors', label: '„Çπ„Éù„É≥„Çµ„Éº', icon: Monitor },
              // Êñ∞ÁùÄÊÉÖÂ†±Ôºà„Éà„ÉÉ„Éó„Éö„Éº„Ç∏„ÅÆÊñ∞ÁùÄÁÆ°ÁêÜÁîªÈù¢„Å∏„É™„É≥„ÇØÔºâ
              { id: 'news-link', label: 'Êñ∞ÁùÄÊÉÖÂ†±', icon: FileText, to: '/admin/news' },
              { id: 'inquiries', label: '„ÅäÂïè„ÅÑÂêà„Çè„Åõ', icon: Mail },
              // Â£≤„Çä‰∏ä„ÅíÁÆ°ÁêÜ„ÅØÂà•„Éö„Éº„Ç∏„Å∏„É™„É≥„ÇØ
              { id: 'sales-link', label: 'Â£≤„Çä‰∏ä„ÅíÁÆ°ÁêÜ', icon: DollarSign, to: '/admin/sales-overview' },
              // „Ç∑„Éß„ÉÉ„ÉóÁÆ°ÁêÜÔºà‰∏äÈÉ®„Çø„Ç∞Ôºâ
              { id: 'shop-link', label: '„Ç∑„Éß„ÉÉ„ÉóÁÆ°ÁêÜ', icon: ShoppingBag, to: '/admin/shop' }
            ].map((tab) => {
              const Icon = tab.icon as any;
              // to „Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„É™„É≥„ÇØ„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØ„Çø„ÉñÂàá„ÇäÊõø„Åà„Éú„Çø„É≥
              if ((tab as any).to) {
                return (
                  <Link
                    key={tab.id}
                    to={(tab as any).to}
                    className={`relative flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors no-underline hover:no-underline ${
                      'text-gray-600 hover:text-blue-700 hover:bg-blue-50'
                    }`}
                  >
                    <Icon className="w-4 h-4 mr-2" />
                    {tab.label}
                  </Link>
                );
              }
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as typeof activeTab)}
                  className={`relative flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                    activeTab === tab.id
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>

        {/* Ê¶ÇË¶Å„Çø„Éñ */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Áµ±Ë®à„Ç´„Éº„Éâ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Á∑è„É¶„Éº„Ç∂„ÉºÊï∞</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalUsers}</p>
                    <p className="text-sm text-green-600">
                      ‰ªäÊúà +{stats.newUsersThisMonth}‰∫∫
                    </p>
                  </div>
                  <Users className="w-8 h-8 text-blue-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Á∑è„Éâ„ÉÉ„Ç∞„É©„É≥Êï∞</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.totalParks}</p>
                    {stats.pendingParks > 0 && (
                      <p className="text-sm text-orange-600">
                        ÊâøË™çÂæÖ„Å° {stats.pendingParks}‰ª∂
                      </p>
                    )}
                  </div>
                  <Building className="w-8 h-8 text-green-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">ÊúàÈñìÂ£≤‰∏ä</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {formatCurrency(stats.monthlyRevenue)}
                    </p>
                    <p className={`text-sm ${calculateRevenueGrowth() >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      ÂâçÊúàÊØî {calculateRevenueGrowth() >= 0 ? '+' : ''}{calculateRevenueGrowth().toFixed(1)}%
                    </p>
                  </div>
                  <DollarSign className="w-8 h-8 text-yellow-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥</p>
                    <p className="text-2xl font-bold text-gray-900">{stats.activeSubscriptions}</p>
                    <p className="text-sm text-gray-600">
                      Á∑èÊï∞ {stats.totalSubscriptions}‰ª∂
                    </p>
                  </div>
                  <Badge className="w-8 h-8 text-purple-500" />
                </div>
              </Card>
            </div>

            {/* „ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥ */}
            <Card className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">„ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <Link to="/admin/users">
                  <Button className="w-full justify-start">
                    <Users className="w-4 h-4 mr-2" />
                    „É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ
                  </Button>
                </Link>
                <Link to="/admin/parks">
                  <Button className="w-full justify-start">
                    <Building className="w-4 h-4 mr-2" />
                    „Éâ„ÉÉ„Ç∞„É©„É≥ÁÆ°ÁêÜ
                  </Button>
                </Link>
                <Link to="/admin/sales">
                  <Button className="w-full justify-start">
                    <BarChart4 className="w-4 h-4 mr-2" />
                    Â£≤‰∏ä„É¨„Éù„Éº„Éà
                  </Button>
                </Link>
                <Link to="/admin/shop">
                  <Button className="w-full justify-start">
                    <ShoppingBag className="w-4 h-4 mr-2" />
                    „Ç∑„Éß„ÉÉ„ÉóÁÆ°ÁêÜ
                  </Button>
                </Link>
              </div>
            </Card>

            {/* Êò†„Åà„Çπ„Éù„ÉÉ„ÉàÈÄöÂ†± ÁÆ°ÁêÜ */}
            <Card className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-gray-900">Êò†„Åà„Çπ„Éù„ÉÉ„ÉàÈÄöÂ†±</h2>
                <div className="flex items-center gap-2">
                  <button onClick={()=>setShowClosedReports(v=>!v)} className="text-sm text-blue-600 underline">
                    {showClosedReports ? 'Êú™ÂØæÂøú„ÅÆ„ÅøË°®Á§∫' : 'ÂØæÂøúÊ∏à„Åø„ÇÇË°®Á§∫'}
                  </button>
                  <Button variant="secondary" size="sm" onClick={fetchSpotReports}>ÂÜçË™≠„ÅøËæº„Åø</Button>
                </div>
              </div>
              {loadingSpotReports ? (
                <div className="text-sm text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</div>
              ) : (
                <div className="overflow-auto">
                  <table className="min-w-full text-sm">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-3 py-2 text-left text-gray-500">Êó•ÊôÇ</th>
                        <th className="px-3 py-2 text-left text-gray-500">„Çπ„Éù„ÉÉ„Éà</th>
                        <th className="px-3 py-2 text-left text-gray-500">ÁêÜÁî±</th>
                        <th className="px-3 py-2 text-left text-gray-500">„É°„É¢</th>
                        <th className="px-3 py-2 text-left text-gray-500">Áä∂ÊÖã</th>
                        <th className="px-3 py-2 text-left text-gray-500">Êìç‰Ωú</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {spotReports
                        .filter(r => showClosedReports ? true : r.status !== 'closed')
                        .map((r) => (
                        <tr key={r.id} className="align-top">
                          <td className="px-3 py-2 whitespace-nowrap">{new Date(r.created_at).toLocaleString('ja-JP')}</td>
                          <td className="px-3 py-2">
                            <div className="font-medium text-gray-900">{r.spot?.title || r.spot_id}</div>
                            <div className="text-xs text-gray-500">{r.spot?.address || ''}</div>
                          </td>
                          <td className="px-3 py-2 max-w-[260px]">
                            <div className="text-gray-800 break-words">{r.reason}</div>
                          </td>
                          <td className="px-3 py-2 w-[260px]">
                            <textarea defaultValue={r.admin_note || ''} className="w-full border rounded px-2 py-1 text-sm" rows={2}
                              onBlur={(e)=>saveAdminNote(r.id, e.target.value)} placeholder="ÂØæÂøú„É°„É¢"/>
                          </td>
                          <td className="px-3 py-2">
                            <span className={`inline-flex px-2 py-1 rounded text-xs font-semibold ${r.status==='closed'?'bg-green-100 text-green-700':'bg-orange-100 text-orange-700'}`}>
                              {r.status==='closed'?'ÂØæÂøúÊ∏à„Åø':'Êú™ÂØæÂøú'}
                            </span>
                          </td>
                          <td className="px-3 py-2 whitespace-nowrap">
                            <div className="flex items-center gap-2">
                              <Link to={`/spots/${r.spot_id}`} target="_blank" className="text-blue-600 hover:text-blue-800 flex items-center"><Eye className="w-4 h-4 mr-1"/>Ë©≥Á¥∞</Link>
                              {r.spot_id && (
                                <button className="text-gray-700 hover:text-gray-900 flex items-center"
                                  onClick={()=>toggleSpotHidden(r.spot_id, !(r.spot?.is_hidden ?? false))}>
                                  {(r.spot?.is_hidden ?? false) ? 'Ë°®Á§∫„Åô„Çã' : 'ÈùûË°®Á§∫„Å´„Åô„Çã'}
                                </button>
                              )}
                              {r.status !== 'closed' && (
                                <button className="text-green-700 hover:text-green-900 flex items-center" onClick={()=>closeReport(r.id)}>
                                  <CheckCircle className="w-4 h-4 mr-1"/>ÂØæÂøúÊ∏à„Åø„Å´„Åô„Çã
                                </button>
                              )}
                            </div>
                          </td>
                        </tr>
                      ))}
                      {spotReports.filter(r => showClosedReports ? true : r.status !== 'closed').length === 0 && (
                        <tr><td className="px-3 py-6 text-center text-gray-500" colSpan={6}>ÈÄöÂ†±„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</td></tr>
                      )}
                    </tbody>
                  </table>
                </div>
              )}
            </Card>
          </div>
        )}

        {/* „Éö„Éº„Ç∏ÁÆ°ÁêÜ„Çø„Éñ */}
        {activeTab === 'pages' && (
          <div className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">„Éö„Éº„Ç∏ÁÆ°ÁêÜ</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-4 bg-white rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">„É©„É≥„Éá„Ç£„É≥„Ç∞„Éö„Éº„Ç∏</h4>
                    </div>
                    <Link to="/landing" target="_blank">
                      <Button className="bg-blue-600 hover:bg-blue-700">Èñã„Åè</Button>
                    </Link>
                  </div>
                </div>
                <div className="p-4 bg-white rounded-lg border">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">„Çπ„Éù„É≥„Çµ„ÉºÂêë„ÅëÊ°àÂÜÖ</h4>
                      <p className="text-sm text-gray-600">ÈáëÈ°ç„Éª„Éó„É©„É≥Ë®òËºâ„ÅÆË™¨Êòé„Éö„Éº„Ç∏</p>
                    </div>
                    <Link to="/sponsor-application" target="_blank">
                      <Button className="bg-blue-600 hover:bg-blue-700">Èñã„Åè</Button>
                    </Link>
                  </div>
                </div>
              </div>
            </Card>
          </div>
        )}

        {/* ‰∏çÊ≠£Ê§úÁü•„Çø„Éñ */}
        {activeTab === 'fraud' && (
          <div className="space-y-6">
            {/* ‰∏çÊ≠£Ê§úÁü•Áµ±Ë®à */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">È´ò„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº</p>
                    <p className="text-2xl font-bold text-red-600">{fraudStats?.totalHighRiskUsers || 0}</p>
                  </div>
                  <ShieldAlert className="w-8 h-8 text-red-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">‰∏≠„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº</p>
                    <p className="text-2xl font-bold text-yellow-600">{fraudStats?.totalMediumRiskUsers || 0}</p>
                  </div>
                  <AlertTriangle className="w-8 h-8 text-yellow-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">ÊúÄËøë„ÅÆÊ§úÁü•</p>
                    <p className="text-2xl font-bold text-blue-600">{fraudStats?.recentDetections || 0}</p>
                    <p className="text-xs text-gray-500">ÈÅéÂéª30Êó•</p>
                  </div>
                  <Eye className="w-8 h-8 text-blue-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">„Éñ„É≠„ÉÉ„ÇØÊ∏à„Åø</p>
                    <p className="text-2xl font-bold text-green-600">{fraudStats?.blockedAttempts || 0}</p>
                  </div>
                  <Shield className="w-8 h-8 text-green-500" />
                </div>
              </Card>

              <Card className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">„Éà„É©„Ç§„Ç¢„É´ÊÇ™Áî®</p>
                    <p className="text-2xl font-bold text-purple-600">{fraudStats?.trialAbuseCount || 0}</p>
                  </div>
                  <AlertTriangle className="w-8 h-8 text-purple-500" />
                </div>
              </Card>
            </div>

            {/* ‰∏çÊ≠£Ê§úÁü•ÁÆ°ÁêÜ */}
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‰∏çÊ≠£Ê§úÁü•ÁÆ°ÁêÜ</h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-4 bg-red-50 rounded-lg">
                  <div>
                    <h4 className="font-medium text-red-900">È´ò„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº„ÅÆÁõ£Ë¶ñ</h4>
                    <p className="text-sm text-red-700">
                      „É™„Çπ„ÇØ„Çπ„Ç≥„Ç¢70‰ª•‰∏ä„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíÂÆöÊúüÁöÑ„Å´Á¢∫Ë™ç„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶Âà∂ÈôêÊé™ÁΩÆ„ÇíÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                  </div>
                  <Link to="/admin/users?filter=high_risk">
                    <Button className="bg-red-600 hover:bg-red-700">
                      <ShieldAlert className="w-4 h-4 mr-2" />
                      Á¢∫Ë™ç„Åô„Çã
                    </Button>
                  </Link>
                </div>

                <div className="flex justify-between items-center p-4 bg-yellow-50 rounded-lg">
                  <div>
                    <h4 className="font-medium text-yellow-900">‰∏≠„É™„Çπ„ÇØ„É¶„Éº„Ç∂„Éº„ÅÆÁõ£Ë¶ñ</h4>
                    <p className="text-sm text-yellow-700">
                      „É™„Çπ„ÇØ„Çπ„Ç≥„Ç¢50-69„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆÂãïÂêë„ÇíÁõ£Ë¶ñ„Åó„ÄÅ„Éë„Çø„Éº„É≥„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                  </div>
                  <Link to="/admin/users?filter=medium_risk">
                    <Button variant="secondary">
                      <AlertTriangle className="w-4 h-4 mr-2" />
                      Á¢∫Ë™ç„Åô„Çã
                    </Button>
                  </Link>
                </div>

                <div className="flex justify-between items-center p-4 bg-blue-50 rounded-lg">
                  <div>
                    <h4 className="font-medium text-blue-900">ÂÖ®„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ</h4>
                    <p className="text-sm text-blue-700">
                      „Åô„Åπ„Å¶„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ‰∏çÊ≠£Ê§úÁü•Áä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åó„ÄÅÁ∑èÂêàÁöÑ„Å™Áõ£Ë¶ñ„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
                    </p>
                  </div>
                  <Link to="/admin/users">
                    <Button variant="secondary">
                      <Users className="w-4 h-4 mr-2" />
                      „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß
                    </Button>
                  </Link>
                </div>
              </div>
            </Card>

            {/* ÈáçË§á„Åó„Å¶„ÅÑ„Åü„Éö„Éº„Ç∏ÁÆ°ÁêÜÔºà„É©„É≥„Éá„Ç£„É≥„Ç∞„Éö„Éº„Ç∏Ôºâ„ÅØÂâäÈô§„Åó„Åæ„Åó„Åü */}
          </div>
        )}

        {/* „Çπ„Éù„É≥„Çµ„ÉºÁÆ°ÁêÜ„Çø„Éñ */}
        {activeTab === 'sponsors' && (
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">„Çπ„Éù„É≥„Çµ„ÉºÂ∫ÉÂëä„ÅäÂïè„ÅÑÂêà„Çè„ÅõÁÆ°ÁêÜ</h3>
            <p className="text-gray-600 mb-4">
              „Çπ„Éù„É≥„Çµ„ÉºÂ∫ÉÂëä„ÅÆ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÁÆ°ÁêÜ„Åß„Åç„Åæ„Åô„ÄÇ
            </p>
            <Link to="/admin/sponsors" className="text-blue-600 hover:text-blue-800">
              Ë©≥Á¥∞„Å™ÁÆ°ÁêÜÁîªÈù¢„Å∏ ‚Üí
            </Link>
          </Card>
        )}

        {/* ÊñΩË®≠ÊâøË™çÁÆ°ÁêÜ„Çø„Éñ */}
        {activeTab === 'facilities' && (
          <AdminFacilityApproval />
        )}

        {/* „Éâ„ÉÉ„Ç∞„É©„É≥ÊâøË™çÁÆ°ÁêÜ„Çø„Éñ */}
        {activeTab === 'parks' && (
          <AdminParkManagement />
        )}

        {activeTab === 'vaccine-approval' && (
          <AdminVaccineApproval />
        )}

        {activeTab === 'users' && (
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ</h3>
            <p className="text-gray-600">
              Ë©≥Á¥∞„Å™„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ„ÅØ
              <Link to="/admin/users" className="text-blue-600 hover:text-blue-800 mx-1">
                „É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ„Éö„Éº„Ç∏
              </Link>
              „ÅßË°å„Åà„Åæ„Åô„ÄÇ
            </p>
          </Card>
        )}

        {activeTab === 'maintenance' && (
          <div>
            <AdminMaintenanceManagementComponent 
              onError={setProcessingError} 
              onSuccess={setProcessingSuccess} 
            />
          </div>
        )}
        
        {/* „ÅäÂïè„ÅÑÂêà„Çè„Åõ„Çø„Éñ */}
        {activeTab === 'inquiries' && (
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">„ÅäÂïè„ÅÑÂêà„Çè„ÅõÔºà„É¶„Éº„Ç∂„Éº‚áÑÁÆ°ÁêÜËÄÖÔºâ</h3>
            <p className="text-gray-600 mb-4">„É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆÂïè„ÅÑÂêà„Çè„Åõ„ÉªDM„Çí‰∏ÄË¶ßÁÆ°ÁêÜ„Åó„Åæ„Åô„ÄÇ</p>
            <Link to="/admin/inquiries" className="inline-block">
              <Button className="bg-blue-600 hover:bg-blue-700">
                <Mail className="w-4 h-4 mr-2" />
                „ÅäÂïè„ÅÑÂêà„Çè„Åõ‰∏ÄË¶ß„Å∏
              </Button>
            </Link>
          </Card>
        )}
      </div>
    </div>
  );
}
