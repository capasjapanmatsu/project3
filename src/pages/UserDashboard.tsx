import {
    AlertTriangle,
    Bell,
    Building,
    CheckCircle,
    Clock,
    Coins,
    Crown,
    Edit,
    Gift,
    Globe,
    Heart,
    History,
    MapPin,
    ShoppingBag,
    Ticket,
    User,
    Users
} from 'lucide-react';
import { useCallback, useEffect, useState } from 'react';
import { Area } from 'react-easy-crop';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import Button from '../components/Button';
import Card from '../components/Card';
import { DogManagementSection } from '../components/dashboard/DogManagementSection';
import { NotificationSection } from '../components/dashboard/NotificationSection';
import { ParkModal } from '../components/dashboard/ParkModal';
import useAuth from '../context/AuthContext';
import { useMe } from '../hooks/useMe';
import { useSubscription } from '../hooks/useSubscription';
import { ensureMinimalProfile } from '../lib/supabase/profiles';
import { useAuthStore } from '../store/authStore';
import { useUIStore } from '../store/uiStore';
import type { Dog, DogPark, NewsAnnouncement, Notification, Profile, Reservation } from '../types';
import { supabase } from '../utils/supabase';
import { uploadAndConvertToWebP } from '../utils/webpConverter';


export function UserDashboard() {
  const { user, logout, isAdmin, lineUser, isLineAuthenticated } = useAuth();
  const { me, loading: meLoading } = useMe();
  const navigate = useNavigate();
  const location = useLocation();
  
  // üöÄ Zustand State Management (ÊÆµÈöéÁöÑÂ∞éÂÖ•)
  const { 
    user: zustandUser, 
    setUser,
    updateProfile: updateAuthProfile
  } = useAuthStore();
  
  const { 
    setGlobalLoading,
    addNotification,
    removeNotification,
    isGlobalLoading
  } = useUIStore();

  // ÂæìÊù•„ÅÆStateÁÆ°ÁêÜÔºàÊÆµÈöéÁöÑ„Å´ÁßªË°åÔºâ
  const [profile, setProfile] = useState<Profile | null>(null);
  const [dogs, setDogs] = useState<Dog[]>([]);
  const [ownedParks, setOwnedParks] = useState<DogPark[]>([]);
  const [recentReservations, setRecentReservations] = useState<Reservation[]>([]);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [news, setNews] = useState<NewsAnnouncement[]>([]);
  const [likedDogs, setLikedDogs] = useState<Dog[]>([]);
  const [facilityReservations, setFacilityReservations] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // Local UI state
  const [selectedPark, setSelectedPark] = useState<DogPark | null>(null);
  const [showParkModal, setShowParkModal] = useState(false);
  const [selectedDog, setSelectedDog] = useState<Dog | null>(null);
  const [showDogEditModal, setShowDogEditModal] = useState(false);
  const [isUpdatingDog, setIsUpdatingDog] = useState(false);
  
  // Form state
  const [dogFormData, setDogFormData] = useState({
    name: '',
    breed: '',
    gender: '',
    birthDate: '',
  });
  const [dogImageFile, setDogImageFile] = useState<File | null>(null);
  const [dogImagePreview, setDogImagePreview] = useState<string | null>(null);
  // Crop state
  const [crop, setCrop] = useState<{ x: number; y: number }>({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area | null>(null);
  const [rabiesVaccineFile, setRabiesVaccineFile] = useState<File | null>(null);
  const [comboVaccineFile, setComboVaccineFile] = useState<File | null>(null);
  const [rabiesExpiryDate, setRabiesExpiryDate] = useState('');
  const [comboExpiryDate, setComboExpiryDate] = useState('');

  // „Éö„ÉÉ„ÉàÈñ¢ÈÄ£ÊñΩË®≠ÁÆ°ÁêÜÁî®„ÅÆstate
  const [facilities, setFacilities] = useState<any[]>([]);
  const [selectedFacility, setSelectedFacility] = useState<any | null>(null);
  const [showFacilityModal, setShowFacilityModal] = useState(false);

  // „ÇØ„Éº„Éù„É≥ÁÆ°ÁêÜÁî®„ÅÆstate
  const [userCoupons, setUserCoupons] = useState<any[]>([]);
  const [validCouponsCount, setValidCouponsCount] = useState(0);
  const [pointsBalance, setPointsBalance] = useState<number>(0);

  // Subscription hook
  const { isActive: hasSubscription } = useSubscription();

  // üöÄ Enhanced Data Fetching (3ÊÆµÈöéÊúÄÈÅ©Âåñ)
  const fetchDashboardData = useCallback(async () => {
    try {
      setGlobalLoading(true);
      setIsLoading(true);
      
      // „Éï„Çß„Éº„Ç∫1: ÊúÄÂÑ™ÂÖà„Éá„Éº„ÇøÔºà„Éó„É≠„Éï„Ç£„Éº„É´„ÉªÁä¨ÊÉÖÂ†±Ôºâ
      // Â∏∏„Å´ Supabase „É¶„Éº„Ç∂„ÉºID „Çí‰ΩøÁî®ÔºàLINE„ÅÆ„Åø„É≠„Ç∞„Ç§„É≥ÊôÇ„ÅØ„Çª„ÉÉ„Ç∑„Éß„É≥‰∫§Êèõ„Åó„Å¶ÂèñÂæóÔºâ
      let uid: string | null = null;
      try {
        const { data: gu } = await supabase.auth.getUser();
        uid = gu?.user?.id ?? null;
        if (!uid) {
          // LINE„Çª„ÉÉ„Ç∑„Éß„É≥„Åå„ÅÇ„ÇãÂâçÊèê„Åß Supabase „Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰∫§Êèõ
          try {
            const resp = await fetch('/line/exchange-supabase-session', { method: 'POST', credentials: 'include' });
            if (resp.ok) {
              const { access_token, refresh_token } = await resp.json() as { access_token: string; refresh_token: string };
              const { data } = await supabase.auth.setSession({ access_token, refresh_token });
              uid = data?.session?.user?.id ?? null;
            }
          } catch {}
        }
      } catch {}

      if (!uid) {
        // Ë™çË®º„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÁ¢∫Á´ã„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÁµÇ‰∫Ü
        setIsLoading(false);
        setGlobalLoading(false);
        return;
      }

      // „Éó„É≠„Éï„Ç£„Éº„É´ÊúÄ‰ΩéÈôê„ÅÆË°å„ÇíÁ¢∫‰øùÔºàLINE„ÅÆ„Åø„Åß„ÇÇÊ©üËÉΩÔºâ
      try { await ensureMinimalProfile(supabase, { id: uid } as any); } catch {}

      // LINE„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÄÅprofiles„ÉÜ„Éº„Éñ„É´„Å´„Ç®„É≥„Éà„É™„Åå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„ÅÆ„Åß„ÄÅ„Ç®„É©„Éº„ÇíÁÑ°Ë¶ñ
      const [profileResponse, dogsResponse] = await Promise.all([
        supabase
          .from('profiles')
          .select('*')
          .eq('id', uid)
          .single()
          .then(result => {
            // LINE„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÄÅprofiles„Å´„Éá„Éº„Çø„Åå„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„ÅÆ„Åß„Ç®„É©„Éº„ÇíÁÑ°Ë¶ñ
            if (result.error && isLineAuthenticated) {
              return { data: null, error: null };
            }
            return result;
          }),
        
        supabase
          .from('dogs')
          .select('*, vaccine_certifications(*)')
          .eq('owner_id', uid)
          .order('created_at', { ascending: false })
      ]);

      // Âü∫Êú¨ÊÉÖÂ†±„ÇíÂç≥Â∫ß„Å´Ë°®Á§∫
      // LINE„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÄÅprofile„Åånull„Åß„ÇÇÁ∂öË°å
      setProfile(profileResponse.data);
      setDogs(dogsResponse.data || []);
      
      // Zustand Store„ÅÆÊõ¥Êñ∞
      if (profileResponse.data && !zustandUser) {
        setUser({
          id: uid || '',
          email: user?.email || '',
          name: profileResponse.data.name,
          role: profileResponse.data.user_type || 'user'
        });
      }

      // Âü∫Êú¨ÁöÑ„Å™„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâUI„ÇíË°®Á§∫ÈñãÂßã
      setIsLoading(false);
      
      // „Éï„Çß„Éº„Ç∫2: ÈáçË¶Å„Å™„Éá„Éº„ÇøÔºà„Éë„Éº„ÇØ„Éª‰∫àÁ¥Ñ„ÉªÈÄöÁü•Ôºâ
      const [
        parksResponse,
        reservationsResponse,
        notificationsResponse,
        facilityReservationsResponse
      ] = await Promise.all([
        supabase
          .from('dog_parks')
          .select('*')
          .eq('owner_id', uid)
          .order('created_at', { ascending: false }),
        
        supabase
          .from('reservations')
          .select('*, dog_park:dog_parks(*), dog:dogs(*)')
          .eq('user_id', uid)
          .order('created_at', { ascending: false })
          .limit(5),
        
        supabase
          .from('notifications')
          .select('*')
          .eq('user_id', uid)
          .eq('read', false)
          .order('created_at', { ascending: false })
          .limit(5),

        supabase
          .from('facility_reservations')
          .select(`*, facility:pet_facilities(name)`)        
          .eq('user_id', uid)
          .neq('status', 'cancelled')
          .gte('reserved_date', new Date(Date.now() - 24*60*60*1000).toISOString().split('T')[0])
          .order('reserved_date', { ascending: false })
          .limit(5)
      ]);

      // ÈáçË¶Å„Éá„Éº„Çø„ÅÆÊõ¥Êñ∞
      setOwnedParks(parksResponse.data || []);
      setRecentReservations(reservationsResponse.data || []);
      setNotifications(notificationsResponse.data || []);
      setFacilityReservations(facilityReservationsResponse.data || []);

      // „Éï„Çß„Éº„Ç∫3: ËøΩÂä†„Éá„Éº„ÇøÔºà„Éã„É•„Éº„Çπ„ÉªÊñΩË®≠„Éª„ÅÑ„ÅÑ„Å≠„Éª„Éù„Ç§„É≥„ÉàÔºâ„Çí„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂèñÂæó
      void Promise.allSettled([
        // „Éã„É•„Éº„Çπ„Éá„Éº„Çø
        supabase
          .from('news_announcements')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(3)
          .then(response => {
            setNews(response.data || []);
          }),
        
        // „Éö„ÉÉ„ÉàÈñ¢ÈÄ£ÊñΩË®≠„Éá„Éº„Çø
        supabase
          .from('pet_facilities')
          .select('*')
          .eq('owner_id', uid)
          .order('created_at', { ascending: false })
          .then(response => {
            if (response.data) {
              setFacilities(response.data);
            }
          })
          .catch(() => {
            // Pet facilities not available
          }),
        
        // „ÅÑ„ÅÑ„Å≠„Åó„Åü„ÉØ„É≥„Å°„ÇÉ„Çì„ÅÆÊÉÖÂ†±
        supabase
          .from('dog_likes')
          .select(`
            *,
            dog:dogs(
              *,
              vaccine_certifications(*)
            )
          `)
          .eq('user_id', uid)
          .order('created_at', { ascending: false })
          .limit(10)
          .then(response => {
            if (response.data) {
              setLikedDogs(response.data.map((like: any) => like.dog).filter(Boolean));
            }
          })
          .catch(() => {
            // Dog likes table not available
          }),
        
        // „ÇØ„Éº„Éù„É≥„Éá„Éº„Çø„ÅÆÂèñÂæó
        supabase
          .from('user_coupons')
          .select(`
            *,
            facility_coupons (
              id, facility_id, title, service_content, discount_value, discount_type, description, start_date, end_date, usage_limit_type, coupon_image_url,
              pet_facilities (name)
            )
          `)
          .eq('user_id', uid)
          .is('used_at', null)
          .gte('facility_coupons.end_date', new Date().toISOString())
          .then(response => {
            if (response.data) {
              setUserCoupons(response.data);
              setValidCouponsCount(response.data.length);
            }
          })
          .catch((error) => {
            console.error('‚ùå [Dashboard] Error loading coupons:', error);
          })
        ,
        // „Éù„Ç§„É≥„ÉàÊÆãÈ´ò
        supabase
          .from('points_balances')
          .select('balance')
          .eq('user_id', uid)
          .maybeSingle()
          .then((res) => {
            setPointsBalance(res.data?.balance || 0);
          })
          .catch(() => {})
      ]);
      
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      setError('„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      addNotification({
        type: 'error',
        title: '„Ç®„É©„Éº',
        message: '„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
        duration: 5000
      });
    } finally {
      setGlobalLoading(false);
    }
  }, [user?.id, lineUser?.id, isLineAuthenticated, zustandUser, setUser, setGlobalLoading, addNotification]);

  // üö¶ Data Loading (Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ„ÅØProtectedRoute„ÅåÊãÖÂΩì)
  useEffect(() => {
    // Data fetching
    fetchDashboardData();

    // Check for success parameter in URL
    if (location.search.includes('success=true')) {
      setShowSuccessMessage(true);
      setSuccess('Êìç‰Ωú„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
      addNotification({
        type: 'success',
        title: 'ÊàêÂäü',
        message: 'Êìç‰Ωú„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ',
        duration: 3000
      });
      window.history.replaceState({}, document.title, location.pathname);
      setTimeout(() => {
        setShowSuccessMessage(false);
        setSuccess('');
      }, 5000);
    }
  }, [location, fetchDashboardData, addNotification]);

  // üêï Dog Management Handlers  
  const handleDogSelect = (dog: Dog) => {
    setSelectedDog(dog);
    
    const birthDate = new Date(dog.birth_date).toISOString().split('T')[0];
    setDogFormData({
      name: dog.name,
      breed: dog.breed,
      gender: dog.gender,
      birthDate: birthDate || '',
    });
    setDogImagePreview(dog.image_url || null);
    
    const cert = dog.vaccine_certifications?.[0];
    setRabiesExpiryDate(cert?.rabies_expiry_date || '');
    setComboExpiryDate(cert?.combo_expiry_date || '');
    
    setShowDogEditModal(true);
  };

  const handleDogImageSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    try {
      // Âü∫Êú¨ÁöÑ„Å™„Éï„Ç°„Ç§„É´Ê§úË®º
      if (file.size > 10 * 1024 * 1024) {
        setError('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ10MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        return;
      }
      
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        setError(`„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÁîªÂÉèÂΩ¢Âºè„Åß„Åô: ${file.type}`);
        return;
      }

      setDogImageFile(file);
      
      const reader = new FileReader();
      reader.onload = (e) => {
        setDogImagePreview(e.target?.result as string);
        setCrop({ x: 0, y: 0 });
        setZoom(1);
        setCroppedAreaPixels(null);
      };
      reader.readAsDataURL(file);
      setError('');
    } catch (error) {
      console.error('Image processing error:', error);
      setError('ÁîªÂÉè„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂà•„ÅÆÁîªÂÉè„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  };

  const handleUpdateDog = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedDog || !user) return;

    try {
      setIsUpdatingDog(true);
      setError('');

      // Âü∫Êú¨ÁöÑ„Å™„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
      if (!dogFormData.name || !dogFormData.breed || !dogFormData.gender || !dogFormData.birthDate) {
        setError('„Åô„Åπ„Å¶„ÅÆÂøÖÈ†àÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        return;
      }

      if (!['„Ç™„Çπ', '„É°„Çπ'].includes(dogFormData.gender)) {
        setError('ÊÄßÂà•„ÅØ„Äå„Ç™„Çπ„Äç„Åæ„Åü„ÅØ„Äå„É°„Çπ„Äç„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
      }



      // Áä¨„ÅÆÊÉÖÂ†±Êõ¥Êñ∞
      const updateData: any = {
        name: dogFormData.name,
        breed: dogFormData.breed,
        gender: dogFormData.gender,
        birth_date: dogFormData.birthDate,
      };

      // ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜÔºà1:1„Éà„É™„Éü„É≥„Ç∞ ‚Üí ÊúÄÂ§ß1200px„É™„Çµ„Ç§„Ç∫ ‚Üí WebPÂ§âÊèõ ‚Üí ÂÆâÂÖ®„Å™UUID„Éï„Ç°„Ç§„É´Âêç„Åß‰øùÂ≠òÔºâ
      if (dogImageFile) {
        const imgBitmap = await createImageBitmap(dogImageFile);
        const sourceSquare = Math.min(imgBitmap.width, imgBitmap.height);
        const targetSize = Math.min(1200, sourceSquare);
        const canvas = document.createElement('canvas');
        canvas.width = targetSize;
        canvas.height = targetSize;
        const ctx = canvas.getContext('2d')!;
        const hasCrop = !!croppedAreaPixels;
        const sx = hasCrop ? croppedAreaPixels!.x : (imgBitmap.width - sourceSquare) / 2;
        const sy = hasCrop ? croppedAreaPixels!.y : (imgBitmap.height - sourceSquare) / 2;
        const sWidth = hasCrop ? croppedAreaPixels!.width : sourceSquare;
        const sHeight = hasCrop ? croppedAreaPixels!.height : sourceSquare;
        ctx.drawImage(imgBitmap, sx, sy, sWidth, sHeight, 0, 0, targetSize, targetSize);
        const blob: Blob = await new Promise((resolve) => canvas.toBlob((b) => resolve(b as Blob), 'image/jpeg', 0.9));
        const squaredFile = new File([blob], 'dog-square.jpg', { type: 'image/jpeg' });

        const safePath = `${selectedDog.id}/${crypto.randomUUID()}.webp`;
        const result = await uploadAndConvertToWebP('dog-images', squaredFile, safePath, { quality: 85, generateThumbnail: false });
        const url = result.webpUrl || result.originalUrl;
        if (!url) throw new Error('ÁîªÂÉè„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        updateData.image_url = url;
      }

      // „Éó„É¨„Éì„É•„Éº„ÇÇ„Éï„Ç°„Ç§„É´„ÇÇÁÑ°„ÅÑÂ†¥Âêà„ÅØDB‰∏ä„ÅÆURL„Çí„ÇØ„É™„Ç¢
      if (!dogImageFile && !dogImagePreview) {
        updateData.image_url = '' as any;
      }

      const { data: updatedDogRows, error: updateError } = await supabase
        .from('dogs')
        .update(updateData)
        .eq('id', selectedDog.id)
        .eq('owner_id', user.id)
        .select('id,image_url');

      if (updateError) throw updateError;
      if (!updatedDogRows || updatedDogRows.length === 0) {
        throw new Error('Êõ¥Êñ∞ÂØæË±°„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„ÄÅ„Åæ„Åü„ÅØÊ®©Èôê„Å´„Çà„ÇäÊõ¥Êñ∞„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ');
      }

      // „ÉØ„ÇØ„ÉÅ„É≥Ë®ºÊòéÔºà‰øùÂ≠ò„ÅßÂÆåÁµêÔºâ: ÁîªÂÉè„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Çã„ÄÅ„Åæ„Åü„ÅØÊúüÈôê„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Çå„Å∞ÊèêÂá∫Êâ±„ÅÑ
      if ((rabiesVaccineFile || comboVaccineFile) || (rabiesExpiryDate || comboExpiryDate)) {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.access_token) throw new Error('„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„ÅôÔºàÊèêÂá∫Ôºâ');

        const ensureJpeg = async (file: File): Promise<File> => {
          if (file.type === 'image/jpeg') return file;
          const bmp = await createImageBitmap(file);
          const c = document.createElement('canvas');
          c.width = bmp.width; c.height = bmp.height;
          c.getContext('2d')!.drawImage(bmp, 0, 0);
          const blob: Blob = await new Promise((res) => c.toBlob((b) => res(b!), 'image/jpeg', 0.92));
          return new File([blob], file.name.replace(/\.[^/.]+$/, '.jpg'), { type: 'image/jpeg' });
        };

        const uploadDirect = async (file: File, kind: 'rabies' | 'combo') => {
          const jpeg = await ensureJpeg(file);
          const key = `${user.id}/${kind}/${Date.now()}-${crypto.randomUUID()}.jpg`;
          const { error: upErr } = await supabase.storage
            .from('vaccine-certs')
            .upload(key, jpeg, { upsert: false, cacheControl: '0', contentType: 'image/jpeg' });
          if (upErr) {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: REST Áõ¥Âè©„Åç
            const projectUrl = import.meta.env.VITE_SUPABASE_URL as string;
            const anonKey    = import.meta.env.VITE_SUPABASE_ANON_KEY as string;
            const resp = await fetch(`${projectUrl}/storage/v1/object/vaccine-certs/${key}`, {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${session.access_token}`,
                apikey: anonKey,
                'Content-Type': 'image/jpeg',
                'x-upsert': 'false',
                'Cache-Control': '0',
              },
              body: jpeg,
            });
            const txt = await resp.text();
            if (!resp.ok) throw new Error(`upload ${kind} failed: ${resp.status} ${txt}`);
          }
          const { data: pub } = supabase.storage.from('vaccine-certs').getPublicUrl(key);
          return pub.publicUrl;
        };

        let rabiesUrl: string | undefined;
        let comboUrl: string | undefined;
        if (rabiesVaccineFile) rabiesUrl = await uploadDirect(rabiesVaccineFile, 'rabies');
        if (comboVaccineFile)  comboUrl  = await uploadDirect(comboVaccineFile,  'combo');

        const resp = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/submit-vaccine`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${session.access_token}`,
            apikey: (import.meta.env.VITE_SUPABASE_ANON_KEY as string)
          },
          body: JSON.stringify({
            dog_id: selectedDog.id,
            rabies_url: rabiesUrl,
            combo_url: comboUrl,
            rabies_expiry: rabiesExpiryDate || undefined,
            combo_expiry: comboExpiryDate || undefined,
          })
        });
        const json = await resp.json().catch(() => ({}));
        if (!resp.ok || !(json as any)?.success) {
          throw new Error(`„ÉØ„ÇØ„ÉÅ„É≥ÊèêÂá∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${resp.status}`);
        }
      }

      setSuccess('„ÉØ„É≥„Å°„ÇÉ„Çì„ÅÆÊÉÖÂ†±„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºÅ');
      addNotification({
        type: 'success',
        title: 'ÊàêÂäü',
        message: '„ÉØ„É≥„Å°„ÇÉ„Çì„ÅÆÊÉÖÂ†±„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºÅ',
        duration: 3000
      });
      
      setShowDogEditModal(false);
      await fetchDashboardData();

      // „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
      resetDogForm();

    } catch (error) {
      console.error('Error updating dog:', error);
      const errorMessage = error instanceof Error ? error.message : '„ÉØ„É≥„Å°„ÇÉ„Çì„ÅÆÊÉÖÂ†±„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
      setError(errorMessage);
      addNotification({
        type: 'error',
        title: '„Ç®„É©„Éº',
        message: errorMessage,
        duration: 5000
      });
    } finally {
      setIsUpdatingDog(false);
    }
  };

  const handleDeleteDog = async (dog: Dog) => {
    if (!window.confirm(`${dog.name}„ÅÆÊÉÖÂ†±„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n\n„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ`)) return;

    try {
      setIsUpdatingDog(true);

      const { error: dogError } = await supabase
        .from('dogs')
        .delete()
        .eq('id', dog.id);

      if (dogError) throw dogError;

      setSuccess(`${dog.name}„ÅÆÊÉÖÂ†±„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ`);
      addNotification({
        type: 'success',
        title: 'ÂâäÈô§ÂÆå‰∫Ü',
        message: `${dog.name}„ÅÆÊÉÖÂ†±„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ`,
        duration: 3000
      });
      
      setShowDogEditModal(false);
      await fetchDashboardData();

    } catch (error) {
      console.error('Error deleting dog:', error);
      setError('„ÉØ„É≥„Å°„ÇÉ„Çì„ÅÆÊÉÖÂ†±„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    } finally {
      setIsUpdatingDog(false);
    }
  };

  // üîî Notification Handler
  const markNotificationAsRead = async (notificationId: string) => {
    try {
      await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId);
      
      setNotifications(prev => prev.filter(n => n.id !== notificationId));
      
      addNotification({
        type: 'info',
        title: 'ÈÄöÁü•',
        message: 'ÈÄöÁü•„ÇíÊó¢Ë™≠„Å´„Åó„Åæ„Åó„Åü',
        duration: 2000
      });
    } catch (error) {
      console.error('Error marking notification as read:', error);
      setError('ÈÄöÁü•„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    }
  };

  // üßπ Utility Functions
  const resetDogForm = () => {
    setDogImageFile(null);
    setRabiesVaccineFile(null);
    setComboVaccineFile(null);
    setRabiesExpiryDate('');
    setComboExpiryDate('');
    setDogImagePreview(null);
  };

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/');
    } catch (error) {
      console.error('„É≠„Ç∞„Ç¢„Ç¶„Éà„Ç®„É©„Éº:', error);
      setError('„É≠„Ç∞„Ç¢„Ç¶„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
    }
  };

  const handleParkSelect = (park: DogPark) => {
    setSelectedPark(park);
    setShowParkModal(true);
  };

  // üé® Loading State with modern design
  if (isLoading || isGlobalLoading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex items-center justify-center py-20">
          <div className="relative">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            <div className="absolute inset-0 animate-ping rounded-full h-12 w-12 border border-blue-400 opacity-20"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-10 md:pt-12 pb-8 space-y-8">
      {/* Header with Modern CSS */}
      <div className="flex justify-between items-center mb-4">
        <div>
          <h1 className="text-xl font-bold text-gray-900 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            „Éû„Ç§„Éö„Éº„Ç∏
          </h1>
          <p className="text-gray-600 mt-1">
            „Çà„ÅÜ„Åì„Åù„ÄÅ{profile?.name || lineUser?.display_name || zustandUser?.name || sessionStorage.getItem('liff_display_name') || '„É¶„Éº„Ç∂„Éº'}„Åï„ÇìÔºÅ
          </p>
        </div>
        <div className="flex items-center space-x-4">
          {isAdmin && (
            <a
              href="/admin"
              className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-4 py-2 rounded-lg font-medium inline-flex items-center transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              <Crown className="w-4 h-4 mr-2" />
              ÁÆ°ÁêÜËÄÖÁîªÈù¢
            </a>
          )}
        </div>
      </div>

      {/* Success/Error Messages with Animation */}
      {showSuccessMessage && (
        <div className="mb-6 p-4 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 text-green-800 rounded-lg flex items-center animate-fade-in">
          <CheckCircle className="w-5 h-5 mr-2 text-green-600" />
          Êìç‰Ωú„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ
        </div>
      )}

      {error && (
        <div className="mb-6 p-4 bg-gradient-to-r from-red-50 to-pink-50 border border-red-200 text-red-800 rounded-lg flex items-center">
          <div className="w-5 h-5 mr-2 text-red-600">‚ö†Ô∏è</div>
          {error}
        </div>
      )}

      {success && (
        <div className="mb-6 p-4 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 text-green-800 rounded-lg flex items-center">
          <CheckCircle className="w-5 h-5 mr-2 text-green-600" />
          {success}
        </div>
      )}



      {/* Dog Management Section */}
      <DogManagementSection
        dogs={dogs}
        user={user}
        selectedDog={selectedDog}
        showDogEditModal={showDogEditModal}
        isUpdatingDog={isUpdatingDog}
        dogUpdateError={error}
        dogUpdateSuccess={success}
        dogFormData={dogFormData}
        dogImageFile={dogImageFile}
        dogImagePreview={dogImagePreview}
        rabiesVaccineFile={rabiesVaccineFile}
        comboVaccineFile={comboVaccineFile}
        rabiesExpiryDate={rabiesExpiryDate}
        comboExpiryDate={comboExpiryDate}
        onDogSelect={handleDogSelect}
        onCloseDogEditModal={() => setShowDogEditModal(false)}
        onUpdateDog={handleUpdateDog}
        onDeleteDog={handleDeleteDog}
        onDogImageSelect={handleDogImageSelect}
        onDogImageRemove={() => {}}
        onRabiesVaccineSelect={(e) => setRabiesVaccineFile(e.target.files?.[0] || null)}
        onComboVaccineSelect={(e) => setComboVaccineFile(e.target.files?.[0] || null)}
        onFormDataChange={setDogFormData}
        onRabiesExpiryDateChange={setRabiesExpiryDate}
        onComboExpiryDateChange={setComboExpiryDate}
        // Crop state
        crop={crop}
        zoom={zoom}
        onCropChange={setCrop}
        onZoomChange={setZoom}
        onCropComplete={(_, area) => setCroppedAreaPixels(area)}
        onImageCropped={(file) => {
          setDogImageFile(file);
          const url = URL.createObjectURL(file);
          setDogImagePreview(url);
        }}
      />

      {/* Facility Reservations Section */}
      <Card className="p-6 bg-white border-gray-200">
        <div className="mb-4 flex justify-between items-center">
          <h2 className="text-xl font-semibold flex items-center">
            <Clock className="w-6 h-6 text-blue-600 mr-2" />
            Â∫óËàó‰∫àÁ¥ÑÁÆ°ÁêÜ
          </h2>
        </div>
        {facilityReservations.length === 0 ? (
          <div className="text-center py-8 text-blue-700">Â∫óËàó„ÅÆ‰∫àÁ¥Ñ„ÅØ„Åæ„Å†„ÅÇ„Çä„Åæ„Åõ„Çì</div>
        ) : (
          <div className="space-y-3">
            {facilityReservations.map((r) => (
              <div key={r.id} className="p-4 bg-white rounded-lg border border-blue-100 flex items-center justify-between">
                <div className="text-sm text-gray-700">
                  <div className="font-semibold">{r.facility?.name || 'ÊñΩË®≠'}</div>
                  <div className="text-gray-600">{r.reserved_date} {r.start_time}-{r.end_time} / {r.guest_count}Âêç / {r.seat_code || 'Â∫ßÂ∏≠:ÊåáÂÆö„Å™„Åó'}</div>
                </div>
                <Link to={`/facilities/${r.facility_id}`}>
                  <Button size="sm" variant="secondary">Ë©≥Á¥∞</Button>
                </Link>
              </div>
            ))}
          </div>
        )}
        <div className="mt-6">
          <Link to="/my-reservations">
            <Button className="w-full bg-blue-600 hover:bg-blue-700 py-3 text-base text-white">‰∏ÄË¶ßË°®Á§∫</Button>
          </Link>
        </div>
      </Card>

      {/* Points Balance */}
      <Card className="p-6 bg-white border-gray-200">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-semibold flex items-center">
            <Coins className="w-6 h-6 text-amber-600 mr-2" />
            ‰øùÊúâ„Éù„Ç§„É≥„Éà
          </h2>
        </div>
        <div className="text-3xl font-bold text-amber-700">{pointsBalance.toLocaleString()} P</div>
        <p className="text-sm text-amber-700 mt-2">„Éö„ÉÉ„Éà„Ç∑„Éß„ÉÉ„Éó„ÅßÂà©Áî®ÂèØËÉΩ</p>
        <div className="mt-6">
          <Link to="/points">
            <Button className="w-full bg-amber-600 hover:bg-amber-700 py-3 text-base text-white">Â±•Ê≠¥„ÇíË¶ã„Çã</Button>
          </Link>
        </div>
      </Card>

      {/* Profile Settings Card */}
      <Card className="p-6 bg-white border-gray-200">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-semibold flex items-center">
            <User className="w-6 h-6 text-gray-700 mr-2" />
            ÁôªÈå≤ÊÉÖÂ†±
          </h2>
        </div>
        <p className="text-gray-700">‰ΩèÊâÄ„ÉªÊ∞èÂêç„ÉªÈÄ£Áµ°ÂÖà„ÇíÁ∑®ÈõÜ</p>
        <ul className="mt-3 text-sm text-gray-700 list-disc pl-5 space-y-1">
          <li>„Çµ„Éñ„Çπ„ÇØÁÆ°ÁêÜÔºàËß£Á¥Ñ„ÉªÂÜçÈñã„ÉªÊîØÊâï„ÅÑÊñπÊ≥ï„ÅÆÊõ¥Êñ∞Ôºâ</li>
          <li>ÈÄÄ‰ºöÁî≥Ë´ãÔºà„Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§„É™„ÇØ„Ç®„Çπ„ÉàÔºâ</li>
        </ul>
        <div className="mt-6">
          <Link to="/profile-settings">
            <Button className="w-full bg-blue-600 hover:bg-blue-700 py-3 text-base text-white">ÁôªÈå≤ÊÉÖÂ†±„ÇíÁ∑®ÈõÜ</Button>
          </Link>
        </div>
      </Card>

      {/* User Coupons Section */}
      <Card className="p-6 bg-white border-gray-200">
        <div className="mb-4 flex justify-between items-center">
          <h2 className="text-xl font-semibold flex items-center">
            <Gift className="w-6 h-6 text-pink-600 mr-2" />
            ‰øùÊúâ„ÇØ„Éº„Éù„É≥ ({validCouponsCount}Êûö)
          </h2>
          <div />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {userCoupons.length === 0 ? (
            <div className="col-span-full text-center py-8">
              <Gift className="w-12 h-12 text-pink-300 mx-auto mb-3" />
              <p className="text-pink-600 font-medium mb-2">‰øùÊúâ„ÇØ„Éº„Éù„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
              <p className="text-pink-500 text-sm">„ÉØ„É≥„Å°„ÇÉ„Çì„Å®Ë°å„Åë„ÇãÊñΩË®≠„Åß„ÇØ„Éº„Éù„É≥„ÇíÂèñÂæó„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</p>
            </div>
          ) : (
            <>
              {userCoupons.slice(0, 6).map((coupon: any) => (
                <div key={coupon.id} className="p-4 bg-white rounded-lg border border-pink-100 shadow-sm">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold mb-1 text-gray-900">
                        {coupon.facility_coupons?.title || '„ÇØ„Éº„Éù„É≥'}
                      </h3>
                      <p className="text-sm text-pink-600 font-medium mb-2">
                        {coupon.facility_coupons?.pet_facilities?.name || 'Â∫óËàóÂêç'}
                      </p>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="px-2 py-1 rounded-full text-xs font-medium bg-pink-100 text-pink-800">
                          {coupon.facility_coupons?.discount_value}
                          {coupon.facility_coupons?.discount_type === 'amount' ? 'ÂÜÜ' : '%'} OFF
                        </span>
                        <span className="text-xs text-gray-500">
                          {new Date(coupon.facility_coupons?.end_date).toLocaleDateString()}„Åæ„Åß
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  {coupon.facility_coupons?.description && (
                    <p className="text-gray-600 mb-3 text-sm line-clamp-2">
                      {coupon.facility_coupons.description}
                    </p>
                  )}
                </div>
              ))}
              {userCoupons.length > 0 && (
                <div className="col-span-full mt-6">
                  <Link to="/my-coupons">
                    <Button className="w-full bg-pink-600 hover:bg-pink-700 py-3 text-base text-white">
                      <Ticket className="w-4 h-4 mr-1" />
                      „ÇØ„Éº„Éù„É≥‰∏ÄË¶ß„ÇíË¶ã„Çã
                    </Button>
                  </Link>
                </div>
              )}
            </>
          )}
        </div>
      </Card>

      {/* Owned Parks Management Section with Modern Styling */}
      <Card className="p-6 bg-white border-gray-200">
        <div className="mb-4 flex justify-between items-center">
          <h2 className="text-xl font-semibold flex items-center">
            <Building className="w-6 h-6 text-green-600 mr-2" />
            ÁÆ°ÁêÜ‰∏≠„ÅÆ„Éâ„ÉÉ„Ç∞„É©„É≥ ({ownedParks.length}ÊñΩË®≠)
          </h2>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {ownedParks.slice(0, 6).map((park) => {
            // „Çπ„ÉÜ„Éº„Çø„Çπ„Å´Âøú„Åò„ÅüË°®Á§∫ÊÉÖÂ†±„ÇíÂèñÂæóÔºàÊñΩË®≠„Å®Âêå„Åò„Éê„ÉÉ„Ç∏Ë°®Ë®ò„Å´Áµ±‰∏ÄÔºâ
            const getStatusInfo = (status: string) => {
              switch (status) {
                case 'approved':
                  return {
                    label: 'ÂÖ¨Èñã‰∏≠',
                    color: 'bg-green-100 text-green-800',
                    icon: CheckCircle,
                    description: ''
                  };
                case 'pending':
                  return {
                    label: 'Á¨¨‰∏ÄÂØ©Êüª‰∏≠',
                    color: 'bg-yellow-100 text-yellow-800',
                    icon: Clock,
                    description: 'ÁÆ°ÁêÜËÄÖ„Å´„Çà„ÇãÂØ©Êüª„Çí„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ'
                  };
                case 'first_stage_passed':
                  return {
                    label: 'Á¨¨‰∫åÂØ©ÊüªÁî≥Ë´ãÂèØËÉΩ',
                    color: 'bg-blue-100 text-blue-800',
                    icon: FileText,
                    description: 'Á¨¨‰∫åÂØ©Êüª„ÅÆÁî≥Ë´ã„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
                  };
                case 'second_stage_waiting':
                  return {
                    label: 'Á¨¨‰∫åÂØ©ÊüªÁî≥Ë´ãÊ∫ñÂÇô‰∏≠',
                    color: 'bg-orange-100 text-orange-800',
                    icon: Settings,
                    description: 'ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁ≠â„ÅÆÊ∫ñÂÇô„ÇíÈÄ≤„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ'
                  };
                case 'second_stage_review':
                  return {
                    label: 'Á¨¨‰∫åÂØ©Êüª‰∏≠',
                    color: 'bg-purple-100 text-purple-800',
                    icon: Clock,
                    description: 'ÁÆ°ÁêÜËÄÖ„Å´„Çà„ÇãÂØ©Êüª„Çí„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ'
                  };
                case 'smart_lock_testing':
                  return {
                    label: '„Çπ„Éû„Éº„Éà„É≠„ÉÉ„ÇØÂÆüË®ºÊ§úÊüª‰∏≠',
                    color: 'bg-indigo-100 text-indigo-800',
                    icon: Shield,
                    description: 'ÂÆüË®ºÊ§úÊüª„ÅÆÂÆå‰∫Ü„Çí„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ'
                  };
                case 'rejected':
                  return {
                    label: 'Âç¥‰∏ã',
                    color: 'bg-red-100 text-red-800',
                    icon: AlertTriangle,
                    description: 'Ë©≥Á¥∞„ÅØÁÆ°ÁêÜ„Éö„Éº„Ç∏„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ'
                  };
                default:
                  return {
                    label: 'ÂØ©Êüª‰∏≠',
                    color: 'bg-gray-100 text-gray-800',
                    icon: Clock,
                    description: ''
                  };
              }
            };

            const statusInfo = getStatusInfo(park.status);

            return (
              <div key={park.id} className="p-4 bg-white rounded-lg border border-gray-200">
                <h3 className="font-semibold mb-1">{park.name}</h3>
                <p className="text-sm text-gray-600 mb-2">{park.address}</p>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium flex items-center space-x-1 ${statusInfo.color}`}>
                      {statusInfo.icon && <statusInfo.icon className="w-3 h-3" />}
                      <span>{statusInfo.label}</span>
                    </span>
                    <div className="text-xs text-gray-500">
                      ÊñôÈáë: ¬•{park.price_per_hour}/ÊôÇÈñì
                    </div>
                  </div>
                  
                  {/* „Çπ„ÉÜ„Éº„Çø„ÇπË™¨Êòé */}
                  {statusInfo.description && (
                    <div className="text-xs text-gray-600 bg-gray-50 px-2 py-1 rounded">
                      {statusInfo.description}
                    </div>
                  )}
                  
                  {/* Á¨¨‰∫åÂØ©ÊüªÁî≥Ë´ãÂèØËÉΩ„Å™Â†¥Âêà„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
                  {park.status === 'first_stage_passed' && (
                    <Link to={`/parks/${park.id}/second-stage`} className="block">
                      <button className="w-full text-xs bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700 transition-colors">
                        Á¨¨‰∫åÂØ©Êüª„ÇíÁî≥Ë´ã„Åô„Çã
                      </button>
                    </Link>
                  )}
                </div>
              </div>
            );
          })}
        </div>
        {ownedParks.length > 6 && (
          <div className="mt-4 text-center">
            <Link to="/my-parks-management">
              <Button variant="secondary" size="sm">
                „Åô„Åπ„Å¶Ë°®Á§∫ ({ownedParks.length}ÊñΩË®≠)
              </Button>
            </Link>
          </div>
        )}
        {/* Áµ±‰∏Ä: ‰∏ÄË¶ß„ÉªÁÆ°ÁêÜ„Éú„Çø„É≥„Çí‰∏ãÈÉ®„Å´Ê®™Èï∑Ë°®Á§∫ */}
        <div className="mt-6">
          <Link to="/my-parks-management">
            <Button className="w-full bg-blue-600 hover:bg-blue-700 py-3 text-base text-white">
              <Edit className="w-4 h-4 mr-2" />
              ‰∏ÄË¶ß„ÉªÁÆ°ÁêÜ
            </Button>
          </Link>
        </div>
      </Card>

      {/* ÁÆ°ÁêÜ‰∏≠„ÅÆ„Éö„ÉÉ„ÉàÈñ¢ÈÄ£ÊñΩË®≠‰∏ÄË¶ßÔºà0‰ª∂„Åß„ÇÇË°®Á§∫Ôºâ */}
      <Card className="p-6 bg-white border-gray-200">
        <div className="mb-6 flex justify-between items-center">
          <div>
            <h2 className="text-xl font-semibold flex items-center">
              <Building className="w-6 h-6 text-teal-600 mr-2" />
              ÁÆ°ÁêÜ‰∏≠„ÅÆ„Éö„ÉÉ„ÉàÈñ¢ÈÄ£ÊñΩË®≠ ({facilities.length}ÊñΩË®≠)
            </h2>
            <p className="text-gray-600 mt-1">„Éö„ÉÉ„Éà„Ç∑„Éß„ÉÉ„Éó„ÄÅÂãïÁâ©ÁóÖÈô¢„ÄÅ„Éà„É™„Éü„É≥„Ç∞„Çµ„É≠„É≥„Å™„Å©„ÅÆÊñΩË®≠ÁÆ°ÁêÜ</p>
          </div>
        </div>

        {facilities.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-600 mb-4">ÁÆ°ÁêÜ‰∏≠„ÅÆ„Éö„ÉÉ„ÉàÈñ¢ÈÄ£ÊñΩË®≠„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</p>
            <Link to="/facility-registration">
              <Button className="bg-teal-600 hover:bg-teal-700">Êñ∞Ë¶èÊñΩË®≠ÁôªÈå≤</Button>
            </Link>
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {facilities.slice(0, 4).map((facility: any) => (
                <div key={facility.id} className="p-4 bg-white rounded-lg border border-teal-100">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold mb-2">{facility.name}</h3>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium flex items-center space-x-1 ${
                          facility.status === 'approved'
                            ? 'bg-green-100 text-green-800'
                            : facility.status === 'pending'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-red-100 text-red-800'
                        }`}>
                          {facility.status === 'approved' && <CheckCircle className="w-3 h-3" />}
                          {facility.status === 'pending' && <Clock className="w-3 h-3" />}
                          {facility.status === 'rejected' && <AlertTriangle className="w-3 h-3" />}
                          <span>
                            {facility.status === 'approved' && 'ÂÖ¨Èñã‰∏≠'}
                            {facility.status === 'pending' && 'ÂØ©Êüª‰∏≠'}
                            {facility.status === 'rejected' && 'Âç¥‰∏ã'}
                            {facility.status === 'suspended' && 'ÂÅúÊ≠¢‰∏≠'}
                          </span>
                        </span>
                      </div>
                    </div>
                  </div>

                  {facility.description && (
                    <p className="text-gray-600 mb-3 text-sm line-clamp-2">{facility.description}</p>
                  )}

                  <div className="space-y-1 mb-3">
                    <div className="flex items-center text-gray-600">
                      <MapPin className="w-3 h-3 mr-2" />
                      <span className="text-xs">{facility.address}</span>
                    </div>
                    {facility.phone && (
                      <div className="flex items-center text-gray-600">
                        <Users className="w-3 h-3 mr-2" />
                        <span className="text-xs">{facility.phone}</span>
                      </div>
                    )}
                    {facility.website && (
                      <div className="flex items-center text-gray-600">
                        <Globe className="w-3 h-3 mr-2" />
                        <a href={facility.website} target="_blank" rel="noopener noreferrer" className="text-xs text-teal-600 hover:text-teal-800">ÂÖ¨Âºè„Çµ„Ç§„Éà</a>
                      </div>
                    )}
                  </div>

                  <div className="flex justify-between items-center pt-3 border-t border-gray-100">
                    <div className="text-xs text-gray-500">{facility.category_name || '„Åù„ÅÆ‰ªñÊñΩË®≠'}</div>
                  </div>
                </div>
              ))}
            </div>
            {facilities.length > 4 && (
              <div className="mt-4 text-center">
                <Link to="/my-facilities-management">
                  <Button variant="secondary" size="sm">„Åô„Åπ„Å¶Ë°®Á§∫ ({facilities.length}ÊñΩË®≠)</Button>
                </Link>
              </div>
            )}
            {/* Áµ±‰∏Ä: ‰∏ÄË¶ß„ÉªÁÆ°ÁêÜ„Éú„Çø„É≥„Çí‰∏ãÈÉ®„Å´Ê®™Èï∑Ë°®Á§∫ */}
            <div className="mt-6">
              <Link to="/my-facilities-management">
                <Button className="w-full bg-blue-600 hover:bg-blue-700 py-3 text-base text-white">
                  <Edit className="w-4 h-4 mr-1" />
                  ‰∏ÄË¶ß„ÉªÁÆ°ÁêÜ
                </Button>
              </Link>
            </div>
          </>
        )}
      </Card>

      {/* AI„ÉÅ„É£„ÉÉ„ÉàÔºà„Éö„Éº„Ç∏ÂÜÖÁâàÔºâ„ÅØFAB„Å´Áµ±Âêà„Åó„Åü„Åü„ÇÅÂâäÈô§ */}

      {/* Quick Actions Section with Modern CSS Grid */}
      <Card className="p-6 bg-white border-gray-200">
        <h2 className="text-xl font-semibold mb-6 flex items-center">
          <span className="text-2xl mr-2">üöÄ</span>
          „ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥
        </h2>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Link to="/parks" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <MapPin className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">„Éâ„ÉÉ„Ç∞„É©„É≥Ê§úÁ¥¢</h3>
                  <p className="text-sm text-blue-700">Ëøë„Åè„ÅÆ„Éâ„ÉÉ„Ç∞„É©„É≥„ÇíÊé¢„Åô</p>
                </div>
              </div>
            </div>
          </Link>

          <Link to="/dogpark-history" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <History className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">„Éâ„ÉÉ„Ç∞„É©„É≥Âà©Áî®Â±•Ê≠¥</h3>
                  <p className="text-sm text-blue-700">ÂÖ•ÈÄÄÂ†¥Â±•Ê≠¥„ÇíÁ¢∫Ë™ç</p>
                </div>
              </div>
            </div>
          </Link>
          
          <Link to="/community" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <Users className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">„Ç≥„Éü„É•„Éã„ÉÜ„Ç£</h3>
                  <p className="text-sm text-blue-700">‰ªñ„ÅÆÈ£º„ÅÑ‰∏ª„Å®‰∫§ÊµÅ</p>
                </div>
              </div>
            </div>
          </Link>
          
          <Link to="/petshop" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <ShoppingBag className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">„Éö„ÉÉ„Éà„Ç∑„Éß„ÉÉ„Éó</h3>
                  <p className="text-sm text-blue-700">„Éö„ÉÉ„ÉàÁî®ÂìÅ„ÇíË≥ºÂÖ•</p>
                </div>
              </div>
            </div>
          </Link>
          
          <Link to="/order-history" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <History className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">Ê≥®ÊñáÂ±•Ê≠¥</h3>
                  <p className="text-sm text-blue-700">Ë≥ºÂÖ•Â±•Ê≠¥„ÇíÁ¢∫Ë™ç</p>
                </div>
              </div>
            </div>
          </Link>
          
          <Link to="/news" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <Bell className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">Êñ∞ÁùÄÊÉÖÂ†±</h3>
                  <p className="text-sm text-blue-700">ÊúÄÊñ∞„ÅÆ„ÅäÁü•„Çâ„Åõ</p>
                </div>
              </div>
            </div>
          </Link>


          
          <Link to="/park-registration-agreement" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <Building className="w-12 h-12 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">„Éâ„ÉÉ„Ç∞„É©„É≥„Ç™„Éº„Éä„ÉºÂãüÈõÜ</h3>
                  <p className="text-sm text-blue-700 mb-2">„ÅÇ„Å™„Åü„ÅÆ„Éâ„ÉÉ„Ç∞„É©„É≥„ÇíÁôªÈå≤</p>
                  <div className="text-xs text-blue-700 font-semibold bg-blue-100 px-2 py-1 rounded-full inline-block">
                    üí∞ ÂèéÁõäÂåñ„ÅÆ„ÉÅ„É£„É≥„ÇπÔºÅ
                  </div>
                </div>
              </div>
            </div>
          </Link>
          
          <Link to="/facility-registration" className="group">
            <div className="p-6 bg-gradient-to-br from-blue-50 to-sky-50 rounded-xl hover:from-blue-100 hover:to-sky-100 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md border border-blue-200">
              <div className="flex items-center gap-4">
                <div className="flex items-center">
                  <Heart className="w-10 h-10 text-blue-600 mr-2" />
                  <ShoppingBag className="w-10 h-10 text-blue-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-blue-900 mb-1">„Éö„ÉÉ„ÉàÈñ¢ÈÄ£ÊñΩË®≠ÁôªÈå≤</h3>
                  <p className="text-sm text-blue-700 mb-2">Â∫óËàó„ÉªÂÆøÊ≥äÊñΩË®≠„Éª„Çµ„É≠„É≥„Å™„Å©</p>
                  <div className="text-xs text-blue-700 font-semibold bg-blue-100 px-2 py-1 rounded-full inline-block">
                    üéâ ‰ªä„Å™„ÇâÁÑ°ÊñôÊé≤ËºâÔºÅ
                  </div>
                </div>
              </div>
            </div>
          </Link>
          
          
        </div>
      </Card>

      {/* Access Status Section - „É™„É¢„Éº„ÉàËß£Èå†ÁßªË°å„ÅÆ„Åü„ÇÅÈùûË°®Á§∫ */}

      {/* Notifications Section */}
      {notifications.length > 0 && (
        <NotificationSection
          notifications={notifications}
          onMarkAsRead={markNotificationAsRead}
        />
      )}



      {/* Park Modal */}
      {showParkModal && selectedPark && (
        <ParkModal
          park={selectedPark}
          onClose={() => setShowParkModal(false)}
        />
      )}
    </div>
  );
}

export default UserDashboard;
