apply plugin: 'com.android.application'

android {
    namespace "com.dogparkjp.app2"
    compileSdk 35
    defaultConfig {
        applicationId "com.dogparkjp.app2"
        minSdkVersion 23
        targetSdkVersion 35
        versionCode 4
        versionName "1.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
            // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~:!*#.html:!*#.css:!*#.js'
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // Packaging rules for assets/resources to avoid duplicate entries during merge
    packaging {
        resources {
            // ignore pre-compressed files only (keep html entrypoints!)
            excludes += ["**/*.gz", "**/*.br"]
            // if duplicates still occur for site assets, pick the first occurrence
            pickFirsts += [
                    "assets/public/**/index.html",
                    "assets/public/**/404.html",
                    "assets/public/**/assets/css/*.css",
                    "assets/public/**/assets/js/*.js",
                    "assets/public/**/assets/js/*.map",
                    "assets/public/**/icons/*.svg",
                    "assets/public/**/images/*",
                    "assets/public/**/manifest.json"
            ]
        }
    }

    // Exclude pre-compressed assets from merge step to avoid duplicate assets
    sourceSets {
        main {
            assets {
                exclude "**/*.gz"
                exclude "**/*.br"
            }
        }
    }

    // Define signingConfigs BEFORE buildTypes so it exists when referenced
    signingConfigs {
        release {
            def ksPath = System.getenv('ANDROID_KEYSTORE_PATH') ?: (project.hasProperty('ANDROID_KEYSTORE_PATH') ? project.property('ANDROID_KEYSTORE_PATH') : '../../keystores/release.keystore')
            def ksPass = System.getenv('ANDROID_KEYSTORE_PASSWORD') ?: (project.hasProperty('ANDROID_KEYSTORE_PASSWORD') ? project.property('ANDROID_KEYSTORE_PASSWORD') : null)
            def kAlias = System.getenv('ANDROID_KEY_ALIAS') ?: (project.hasProperty('ANDROID_KEY_ALIAS') ? project.property('ANDROID_KEY_ALIAS') : 'dogparkjp')
            def kPass = System.getenv('ANDROID_KEY_ALIAS_PASSWORD') ?: (project.hasProperty('ANDROID_KEY_ALIAS_PASSWORD') ? project.property('ANDROID_KEY_ALIAS_PASSWORD') : null)

            storeFile file(ksPath)
            if (ksPass != null) storePassword ksPass
            keyAlias kAlias
            if (kPass != null) keyPassword kPass
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Sign if keystore is present
            if ((System.getenv('ANDROID_KEYSTORE_PASSWORD') || project.hasProperty('ANDROID_KEYSTORE_PASSWORD')) && (System.getenv('ANDROID_KEY_ALIAS_PASSWORD') || project.hasProperty('ANDROID_KEY_ALIAS_PASSWORD'))) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    if (project.findProject(':capacitor-cordova-android-plugins') != null) {
        implementation project(':capacitor-cordova-android-plugins')
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}