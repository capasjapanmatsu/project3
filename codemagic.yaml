workflows:
  ios-release:
    name: iOS App Store (Capacitor/Ionic)
    max_build_duration: 60
    instance_type: mac_mini_m1

    integrations:
      app_store_connect: "DogParkJP API Key"

    environment:
      xcode: latest
      cocoapods: default
      node: 20
      vars:
        BUNDLE_ID: com.dogparkjp.app
        APP_NAME: DogPark Japan
        DEVELOPMENT_TEAM: 9HT7A6UF4K
        PROFILE_NAME: dogparkjp_app_store_v2
      groups:
        - supabase
        - codesign   # ← CERTIFICATE_PRIVATE_KEY はこのグループに入っている前提

    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/App/Pods
        - ~/.npm

    scripts:
      - name: Show versions
        script: |
          echo "Node: $(node -v)"
          echo "NPM:  $(npm -v)"

      - name: Install dependencies
        script: |
          npm ci --legacy-peer-deps

      - name: Build web assets (Vite)
        script: |
          npm run build

      - name: Ensure iOS platform exists
        script: |
          if [ ! -d "ios" ]; then
            npx cap add ios
          fi

      - name: Sync Capacitor iOS
        script: |
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod repo update
          pod install

      # --- Debug: what’s on the machine ---
      - name: Inspect installed certs & profiles
        script: |
          echo "== Identities =="
          security find-identity -v -p codesigning || true
          echo "== Provisioning Profiles =="
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || true
          echo "== Certificates dir =="
          ls -la "$HOME/Library/MobileDevice/Certificates/" || true

      # --- Fetch profile/cert from App Store Connect (reads CERTIFICATE_PRIVATE_KEY from env) ---
      - name: Fetch profiles & import certs
        script: |
          keychain initialize
          # フラグは付けずに実行（CERTIFICATE_PRIVATE_KEY を自動で使用）
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          echo "== After fetch =="
          ls -la "$HOME/Library/MobileDevice/Certificates/" || true
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || true

      # --- Build with explicit profile (Manual signing) ---
      - name: Build IPA with Xcode (profile pinned)
        script: |
          echo "Using PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME"
          xcode-project build-ipa \
            --workspace "ios/App/App.xcworkspace" \
            --scheme "App" \
            --archive-flags="DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME CODE_SIGN_STYLE=Manual -destination 'generic/platform=iOS'"

      # --- Verify settings ---
      - name: Show effective build settings (provisioning)
        script: |
          set -o pipefail
          xcodebuild -workspace ios/App/App.xcworkspace -scheme App -showBuildSettings | \
            grep -E "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|PROVISIONING_PROFILE" || true

    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/Library/Logs/gym/*.log
      - $CM_BUILD_DIR/ios/App/build/**/*.log

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
