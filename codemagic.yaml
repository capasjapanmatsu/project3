workflows:
  ios-release:
    name: iOS App Store (Capacitor/Ionic)
    max_build_duration: 60
    instance_type: mac_mini_m1

    integrations:
      app_store_connect: "DogParkJP API Key"

    environment:
      xcode: latest
      cocoapods: default
      node: 20
      vars:
        BUNDLE_ID: com.dogparkjp.app
        APP_NAME: DogPark Japan
        DEVELOPMENT_TEAM: 9HT7A6UF4K
        CODE_SIGN_IDENTITY: "Apple Distribution"
      groups:
        - supabase
        - codesign

    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/App/Pods
        - ~/.npm

    scripts:
      - name: Show versions
        script: |
          echo "Node: $(node -v)"
          echo "NPM : $(npm -v)"

      - name: Install dependencies
        script: |
          npm ci --legacy-peer-deps

      - name: Build web assets (Vite)
        script: |
          npm run build

      - name: Ensure iOS platform exists
        script: |
          if [ ! -d "ios" ]; then
            npx cap add ios
          fi

      - name: Sync Capacitor iOS
        script: |
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod repo update
          pod install

      # ============= サイン用ファイルを取得し、実際にあるプロファイルを検出 =============
      - name: Fetch profiles & import certs
        script: |
          set -e
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates

          echo "== Installed Provisioning Profiles =="
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || true

          # プロファイル一覧から Bundle ID が一致するものを検出して UUID と Name を取得
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          FOUND_UUID=""
          FOUND_NAME=""
          for f in "$PROFILE_DIR"/*.mobileprovision; do
            [ -f "$f" ] || continue
            PLIST=$(/usr/bin/security cms -D -i "$f")
            APPID=$(echo "$PLIST" | /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin 2>/dev/null || true)
            UUID=$( echo "$PLIST" | /usr/libexec/PlistBuddy -c "Print :UUID"    /dev/stdin 2>/dev/null || true)
            NAME=$( echo "$PLIST" | /usr/libexec/PlistBuddy -c "Print :Name"    /dev/stdin 2>/dev/null || true)

            if echo "$APPID" | grep -q "^${DEVELOPMENT_TEAM}\.${BUNDLE_ID}$"; then
              FOUND_UUID="$UUID"
              FOUND_NAME="$NAME"
              echo "Matched profile: $NAME ($UUID)"
              break
            fi
          done

          if [ -z "$FOUND_UUID" ]; then
            echo "ERROR: Provisioning profile for ${BUNDLE_ID} not found on the builder."
            echo "Profiles present:"
            for f in "$PROFILE_DIR"/*.mobileprovision; do
              [ -f "$f" ] || continue
              PLIST=$(/usr/bin/security cms -D -i "$f")
              NAME=$(echo "$PLIST" | /usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin 2>/dev/null || true)
              APPID=$(echo "$PLIST" | /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin 2>/dev/null || true)
              echo " - $NAME => $APPID"
            done
            exit 1
          fi

          # 後続ステップで使えるよう環境変数化
          echo "PROFILE_UUID=$FOUND_UUID" >> $CM_ENV
          echo "PROFILE_NAME=$FOUND_NAME" >> $CM_ENV

      # ============= ExportOptions.plist を作成（App Store 用） =============
      - name: Create ExportOptions.plist
        script: |
          cat > $CM_BUILD_DIR/ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>manageAppVersionAndBuildNumber</key>
            <true/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.dogparkjp.app</key>
              <string>$PROFILE_NAME</string>
            </dict>
          </dict>
          </plist>
          EOF
          echo "ExportOptions.plist created."

      # ============= アーカイブ（UUID と Name の両方を明示） =============
      - name: Archive with xcodebuild (Manual signing, verbose errors)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/build/ios/App.xcarchive"
          LOG_PATH="$CM_BUILD_DIR/xcode_archive.log"

          echo "Using profile: NAME='$PROFILE_NAME' UUID='$PROFILE_UUID'"
          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            -destination 'generic/platform=iOS' \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            archive | tee "$LOG_PATH"

          # 典型的なエラーパターン抽出（参考表示）
          (grep -nE " error: | fatal error: | clang: error: | ld: (warning|error)| Command .* failed|No profile" "$LOG_PATH" || true) | head -n 120

      - name: Export IPA
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/build/ios/App.xcarchive"
          EXPORT_PATH="$CM_BUILD_DIR/build/ios/ipa"
          /usr/bin/xcodebuild \
            -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$CM_BUILD_DIR/ExportOptions.plist" \
            -exportPath "$EXPORT_PATH"
          ls -la "$EXPORT_PATH"

      - name: Show effective build settings (provisioning)
        script: |
          set -o pipefail
          xcodebuild -workspace ios/App/App.xcworkspace -scheme App -showBuildSettings | \
            grep -E "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|PROVISIONING_PROFILE|CODE_SIGN_IDENTITY" || true

    artifacts:
      - build/ios/ipa/*.ipa
      - $CM_BUILD_DIR/xcode_archive.log
      - $HOME/Library/Logs/gym/*.log
      - $CM_BUILD_DIR/ios/App/build/**/*.log

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
