workflows:
  ios-release:
    name: iOS App Store (Capacitor/Ionic)
    max_build_duration: 60
    instance_type: mac_mini_m1

    integrations:
      app_store_connect: "DogParkJP API Key"

    environment:
      xcode: latest
      cocoapods: default
      node: 20
      vars:
        BUNDLE_ID: com.dogparkjp.app
        APP_NAME: DogPark Japan
        DEVELOPMENT_TEAM: 9HT7A6UF4K
      groups:
        - supabase
        - codesign

    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - ios/App/Pods
        - ~/.npm

    scripts:
      - name: Show versions
        script: |
          echo "Node: $(node -v)"
          echo "NPM : $(npm -v)"

      - name: Install dependencies
        script: |
          npm ci --legacy-peer-deps

      - name: Build web assets (Vite)
        script: |
          npm run build

      - name: Ensure iOS platform exists
        script: |
          if [ ! -d "ios" ]; then
            npx cap add ios
          fi

      - name: Sync Capacitor iOS
        script: |
          npx cap sync ios

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod repo update
          pod install

      # 現在インストール済みの証明書 / プロファイルを可視化
      - name: Inspect installed certs & profiles
        script: |
          echo "== Identities =="
          security find-identity -v -p codesigning || true
          echo "== Provisioning Profiles(before) =="
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || true

      # App Store Connect から必要なプロファイルを取得（無ければ作成）し、p12 を取り込む
      - name: Fetch profiles & import certs
        script: |
          set -e
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          echo "== Provisioning Profiles(after fetch) =="
          ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" || true

      # Xcode プロジェクトへ取得済みプロファイルを適用（ターゲット毎に設定してくれる）
      - name: Apply profiles to Xcode project
        script: |
          set -e
          xcode-project use-profiles

      # App Store 用の ExportOptions.plist を作成
      - name: Create ExportOptions.plist
        script: |
          cat > $CM_BUILD_DIR/ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>manageAppVersionAndBuildNumber</key>
            <true/>
            <key>signingStyle</key>
            <string>manual</string>
          </dict>
          </plist>
          EOF

      # 署名は use-profiles に任せ、手動署名モードでアーカイブ
      - name: Archive with xcodebuild (manual signing, verbose)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/build/ios/App.xcarchive"
          LOG_PATH="$CM_BUILD_DIR/xcode_archive.log"

          xcodebuild \
            -workspace ios/App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            archive | tee "$LOG_PATH"

          # 失敗解析用にエラー行を抽出
          (grep -nE " error: | fatal error: | clang: error: | ld: (warning|error)| Command .* failed|No profile" "$LOG_PATH" || true) | head -n 120

          test -d "$ARCHIVE_PATH"

      - name: Export IPA
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/build/ios/App.xcarchive"
          EXPORT_PATH="$CM_BUILD_DIR/build/ios/ipa"
          /usr/bin/xcodebuild \
            -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$CM_BUILD_DIR/ExportOptions.plist" \
            -exportPath "$EXPORT_PATH"
          ls -la "$EXPORT_PATH"

      - name: Show effective build settings (provisioning)
        script: |
          set -o pipefail
          xcodebuild -workspace ios/App/App.xcworkspace -scheme App -showBuildSettings | \
            grep -E "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|PROVISIONING_PROFILE" || true

    artifacts:
      - build/ios/ipa/*.ipa
      - $CM_BUILD_DIR/xcode_archive.log
      - $HOME/Library/Logs/gym/*.log
      - $CM_BUILD_DIR/ios/App/build/**/*.log

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
