-- Add business category to products table
ALTER TABLE products DROP CONSTRAINT IF EXISTS products_category_check;
ALTER TABLE products ADD CONSTRAINT products_category_check CHECK (category IN ('food', 'treats', 'toys', 'accessories', 'health', 'sheets', 'business'));

-- Create product_images table for multiple images support
CREATE TABLE IF NOT EXISTS product_images (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  display_order INTEGER NOT NULL CHECK (display_order >= 0 AND display_order <= 9),
  alt_text TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(product_id, display_order)
);

-- Add RLS policies for product_images
ALTER TABLE product_images ENABLE ROW LEVEL SECURITY;

-- Public read access
CREATE POLICY "product_images_public_read" ON product_images
  FOR SELECT USING (true);

-- Admin only write access  
CREATE POLICY "product_images_admin_write" ON product_images
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

CREATE POLICY "product_images_admin_update" ON product_images
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

CREATE POLICY "product_images_admin_delete" ON product_images
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND user_type = 'admin'
    )
  );

-- Create trigger to auto-update updated_at
CREATE OR REPLACE FUNCTION update_product_images_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_product_images_updated_at
  BEFORE UPDATE ON product_images
  FOR EACH ROW
  EXECUTE FUNCTION update_product_images_updated_at();

-- Migrate existing product images to new table
INSERT INTO product_images (product_id, image_url, display_order, alt_text)
SELECT 
  id, 
  image_url, 
  0, 
  name
FROM products 
WHERE image_url IS NOT NULL AND image_url != '';

-- Add constraint to limit max 10 images per product
CREATE OR REPLACE FUNCTION check_product_image_limit()
RETURNS TRIGGER AS $$
BEGIN
  IF (SELECT COUNT(*) FROM product_images WHERE product_id = NEW.product_id) >= 10 THEN
    RAISE EXCEPTION 'Product cannot have more than 10 images';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_product_image_limit_trigger
  BEFORE INSERT ON product_images
  FOR EACH ROW
  EXECUTE FUNCTION check_product_image_limit();

-- Create index for better performance
CREATE INDEX idx_product_images_product_id ON product_images(product_id);
CREATE INDEX idx_product_images_display_order ON product_images(product_id, display_order); 