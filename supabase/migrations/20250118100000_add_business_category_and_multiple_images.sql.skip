-- 商品に業務用カテゴリと複数画像対応を追加

-- 1. productsテーブルのカテゴリ制約に「business」を追加
ALTER TABLE products DROP CONSTRAINT IF EXISTS products_category_check;
ALTER TABLE products ADD CONSTRAINT products_category_check 
CHECK (category = ANY (ARRAY['food'::text, 'treats'::text, 'toys'::text, 'accessories'::text, 'health'::text, 'sheets'::text, 'business'::text]));

-- 2. 商品画像テーブルを作成
CREATE TABLE IF NOT EXISTS product_images (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  product_id uuid NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  image_url text NOT NULL,
  display_order integer NOT NULL DEFAULT 0,
  alt_text text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  
  -- 一つの商品に最大10枚まで
  CONSTRAINT product_images_max_per_product CHECK (display_order >= 0 AND display_order < 10),
  -- 同じ商品内で表示順序は重複不可
  CONSTRAINT product_images_unique_order UNIQUE (product_id, display_order)
);

-- 3. インデックス作成
CREATE INDEX IF NOT EXISTS product_images_product_id_idx ON product_images(product_id);
CREATE INDEX IF NOT EXISTS product_images_display_order_idx ON product_images(product_id, display_order);

-- 4. RLS有効化
ALTER TABLE product_images ENABLE ROW LEVEL SECURITY;

-- 5. ポリシー作成（商品画像は誰でも参照可能、管理者のみ編集可能）
DROP POLICY IF EXISTS "商品画像は誰でも参照可能" ON product_images;
CREATE POLICY "商品画像は誰でも参照可能"
ON product_images FOR SELECT
TO public
USING (true);

DROP POLICY IF EXISTS "商品画像は管理者のみ編集可能" ON product_images;
CREATE POLICY "商品画像は管理者のみ編集可能"
ON product_images FOR ALL
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND is_admin = true
  )
);

-- 6. 既存商品のimage_urlを新しいテーブルに移行
INSERT INTO product_images (product_id, image_url, display_order, alt_text)
SELECT 
  id as product_id,
  image_url,
  0 as display_order,
  name as alt_text
FROM products 
WHERE image_url IS NOT NULL AND image_url != ''
ON CONFLICT (product_id, display_order) DO NOTHING;

-- 7. 更新日時の自動更新トリガー
CREATE OR REPLACE FUNCTION update_product_images_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS product_images_updated_at_trigger ON product_images;
CREATE TRIGGER product_images_updated_at_trigger
  BEFORE UPDATE ON product_images
  FOR EACH ROW
  EXECUTE FUNCTION update_product_images_updated_at();

-- コメント追加
COMMENT ON TABLE product_images IS '商品画像テーブル（商品1つにつき最大10枚の画像）';
COMMENT ON COLUMN product_images.display_order IS '表示順序（0-9、0が最初の画像）';
COMMENT ON COLUMN product_images.alt_text IS '画像の代替テキスト（アクセシビリティ用）'; 