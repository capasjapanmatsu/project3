name: PWA Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  FORCE_COLOR: 3

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run unit tests
        run: npm run test
        
  pwa-validation:
    name: PWA Validation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build PWA
        run: npm run build:pwa
        
      - name: Validate manifest.json
        run: |
          node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('dist/manifest.json', 'utf8'));
          const required = ['name', 'short_name', 'start_url', 'display', 'icons'];
          const missing = required.filter(field => !manifest[field]);
          if (missing.length > 0) {
            console.error('Missing required fields:', missing);
            process.exit(1);
          }
          console.log('‚úÖ Manifest validation passed');
          "
          
      - name: Check Service Worker
        run: |
          if [ ! -f "dist/sw.js" ]; then
            echo "‚ùå Service Worker not found"
            exit 1
          fi
          echo "‚úÖ Service Worker found"
          
      - name: Check offline page
        run: |
          if [ ! -f "dist/offline.html" ]; then
            echo "‚ùå Offline page not found"
            exit 1
          fi
          echo "‚úÖ Offline page found"
          
      - name: Run Lighthouse PWA audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pwa-build
          path: dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check for vulnerabilities
        run: |
          npm audit --json --audit-level moderate > audit.json
          vulnerabilities=$(cat audit.json | jq '.metadata.vulnerabilities.moderate + .metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "‚ùå Security vulnerabilities found"
            cat audit.json | jq '.advisories'
            exit 1
          fi
          echo "‚úÖ No security vulnerabilities found"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [pwa-validation, security-scan]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build PWA
        run: npm run build:pwa
        env:
          VITE_ENVIRONMENT: preview
          
      - name: Deploy to Netlify Preview
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "PWA Preview: ${{ github.event.pull_request.title }}"
          alias: "pr-${{ github.event.number }}"
          enable-pull-request-comment: true
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [pwa-validation, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build PWA for production
        run: npm run build:pwa
        env:
          VITE_ENVIRONMENT: production
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Generate sitemap
        run: |
          npm run pwa:sitemap
          
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Production PWA Deploy: ${{ github.sha }}"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          
      - name: Post-deployment PWA validation
        run: |
          sleep 30  # Wait for deployment to propagate
          npx lighthouse https://your-domain.com --only-categories=pwa --output=json --output-path=./lighthouse-production.json
          score=$(cat lighthouse-production.json | jq '.categories.pwa.score * 100')
          if (( $(echo "$score < 90" | bc -l) )); then
            echo "‚ùå PWA score too low: $score"
            exit 1
          fi
          echo "‚úÖ PWA score: $score"
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "üöÄ PWA successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "‚ùå PWA deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 60
        
      - name: Run comprehensive Lighthouse audit
        run: |
          npx lighthouse https://your-domain.com \
            --output=html \
            --output=json \
            --output-path=./lighthouse-report \
            --chrome-flags="--headless --no-sandbox"
            
      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.*
          
      - name: Performance regression check
        run: |
          # Compare with previous performance metrics
          # This is a placeholder - implement actual regression checking
          echo "üìä Performance monitoring completed"
