/*! Build: 2025-07-17T07:59:15.523Z
Version: 0.0.0 */
Object.defineProperty;import{_ as a}from"./pages-dog.BrfoFXaJ.js";import{r as e}from"./vendor-react.D8SVeCGP.js";import{c as s}from"./vendor-supabase.RBPF72ft.js";throw new Error("Supabase 環境変数が見つかりません");function t(a){try{const e=window[a],s="__storage_test__";return e.setItem(s,s),e.removeItem(s),!0}catch{return!1}}function n(a,e="localStorage"){try{return t(e)?window[e].getItem(a):memoryStorage[a]||null}catch(s){return memoryStorage[a]||null}}function o(a,e,s="localStorage"){try{return t(s)?(window[s].setItem(a,e),!0):(memoryStorage[a]=e,!0)}catch(n){return memoryStorage[a]=e,!1}}async function r(a){try{const e=a.replace(/-/g,"");if(!/^\d{7}$/.test(e))return{success:!1,message:"郵便番号は7桁の数字で入力してください"};const s=await fetch(`https://zipcloud.ibsnet.co.jp/api/search?zipcode=${e}`);if(!s.ok)throw new Error("郵便番号検索APIでエラーが発生しました");const t=await s.json();return 200!==t.status?{success:!1,message:t.message||"郵便番号検索に失敗しました"}:t.results&&0!==t.results.length?{success:!0,results:t.results}:{success:!1,message:"該当する住所が見つかりませんでした"}}catch(e){return{success:!1,message:"郵便番号検索中にエラーが発生しました"}}}function i(a){return`${a.address1}${a.address2}${a.address3}`}function c(a,e,s){const t="\ufeff"+[a.map(d).join(","),...e.map((a=>a.map((a=>d(a.toString()))).join(",")))].join("\n"),n=new Blob([t],{type:"text/csv;charset=utf-8;"}),o=URL.createObjectURL(n),r=document.createElement("a");r.setAttribute("href",o),r.setAttribute("download",s),r.style.visibility="hidden",document.body.appendChild(r),r.click(),document.body.removeChild(r)}function d(a){return a.includes('"')||a.includes(",")||a.includes("\n")||a.includes("\r")?`"${a.replace(/"/g,'""')}"`:a}async function u(a={}){try{const{data:{session:e}}=await supabase.auth.getSession();if(!(null==e?void 0:e.access_token))throw new Error("認証が必要です");const s=await fetch("/functions/v1/deploy-to-netlify",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e.access_token}`},body:JSON.stringify({buildCommand:a.buildCommand||"npm run build",outputDir:a.outputDir||"dist",siteId:a.siteId,deployId:a.deployId,netlifyApiKey:"your_netlify_api_key"})});if(!s.ok){const a=await s.json();throw new Error(a.error||"デプロイに失敗しました")}return await s.json()}catch(e){throw e}}async function l(a,e){try{return await u({siteId:a,deployId:e})}catch(s){throw s}}async function m(a={}){try{const{data:{session:e}}=await supabase.auth.getSession();if(!(null==e?void 0:e.access_token))throw new Error("認証が必要です");const s=await fetch("/functions/v1/getDeploymentStatus",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e.access_token}`},body:JSON.stringify({id:a.id,netlifyApiKey:"your_netlify_api_key"})});if(!s.ok){const a=await s.json();throw new Error(a.error||"デプロイステータスの取得に失敗しました")}return await s.json()}catch(e){throw e}}export{AdminFacilityApproval as $,DogParkRules as A,ProductDetail as B,PrivacyPolicy as C,DogParkList as D,Contact as E,PaymentConfirmation as F,BusinessInformation as G,Home as H,NewsDetail as I,NewParkDetail as J,DogProfile as K,Login as L,MagicLink as M,News as N,TwoFactorSetup as O,PetShop as P,TwoFactorVerify as Q,Register as R,DogInfo as S,TermsOfService as T,DogInfoFoods as U,DogInfoVaccine as V,DogInfoBreeds as W,DogInfoParasite as X,DogInfoSnack as Y,DogInfoShow as Z,FacilityRegistration as _,getVaccineImageUrl as a,AdminVaccineApproval as a0,UserDashboard as a1,LikedDogs as a2,DogRegistration as a3,DogManagement as a4,ParkReservation as a5,Community as a6,Cart as a7,Checkout as a8,OrderHistory as a9,OwnerDashboard as aa,ParkRegistrationAgreement as ab,ParkRegistration as ac,AdminDashboard as ad,AdminUserManagement as ae,AdminParkManagement as af,AdminReservationManagement as ag,AdminSalesManagement as ah,AdminManagement as ai,AdminTasks as aj,AdminShopManagement as ak,AdminRevenueReport as al,AccessControl as am,PaymentSetup as an,OwnerPaymentSystem as ao,Subscription as ap,ProfileSettings as aq,PaymentMethodSettings as ar,ParkManagement as as,DogParkHistory as at,ParkRegistrationSecondStage as au,ParkPublishingSetup as av,authDebug as aw,directVaccineUpload$1 as ax,safeSupabaseQuery as b,handleSupabaseError$1 as c,checkAndSetAdminUser as d,ensureVaccineBucketIsPublic as e,directUpdateUserType as f,getCachedClientIP as g,handleSupabaseError as h,c as i,logger as j,handleVaccineUploadFixed as k,log as l,n as m,notify as n,l as o,pwaManager as p,o as q,u as r,supabase as s,m as t,r as u,validateVaccineFile as v,i as w,parallelSupabaseQueries as x,notificationManager as y,DogParkDetail as z};
