import{r as e}from"./core-vendor-DBEP70vW.js";import{s as a,l as r,x as t,i}from"./index-CDzr2Gkx.js";const n=n=>{const[o,s]=e.useState([]),[d,c]=e.useState([]),[_,l]=e.useState(!0),[g,p]=e.useState(""),[m,f]=e.useState(""),u=async()=>{try{r("info","🔍 Fetching pending vaccines..."),await(async()=>{try{const{error:e}=await a.storage.updateBucket("vaccine-certs",{public:!0});return!e}catch(g){return!1}})();const e=await i(()=>a.from("vaccine_certifications").select("\n            id,\n            dog_id,\n            rabies_vaccine_image,\n            combo_vaccine_image,\n            rabies_expiry_date,\n            combo_expiry_date,\n            status,\n            created_at,\n            dog:dogs (\n              id,\n              name,\n              breed,\n              gender,\n              birth_date,\n              owner:profiles (\n                id,\n                name\n              )\n            )\n          ").eq("status","pending").order("created_at",{ascending:!1}));if(e.error)throw r("error","❌ Vaccines fetch error:",e.error),e.error;const t=e.data||[];if(0===t.length)return r("info","ℹ️ No pending vaccines found"),void c([]);r("info",`✅ Found ${t.length} pending vaccines`);const n=t.map(e=>{const a=Array.isArray(e.dog)?e.dog[0]:e.dog,t=a?Array.isArray(a.owner)?a.owner[0]:a.owner:null;return a&&t?{id:e.id,dog_id:e.dog_id,rabies_vaccine_image:e.rabies_vaccine_image,combo_vaccine_image:e.combo_vaccine_image,rabies_expiry_date:e.rabies_expiry_date,combo_expiry_date:e.combo_expiry_date,status:e.status,created_at:e.created_at,dog:{id:a.id,name:a.name,breed:a.breed,gender:a.gender,birth_date:a.birth_date,owner:{id:t.id,name:t.name}}}:(r("warn","❌ Invalid vaccine data:",{vaccine:e}),null)}).filter(e=>null!==e);c(n)}catch(e){r("error","❌ Error fetching vaccines:",{error:t(e)}),p(`ワクチン証明書データの取得に失敗しました: ${t(e)}`)}},h=async()=>{try{l(!0),p(""),"parks"===n?await(async()=>{try{r("info","🔍 Fetching pending parks...");const e=await i(()=>a.from("dog_parks").select("\n            id,\n            name,\n            address,\n            status,\n            created_at,\n            owner_id\n          ").in("status",["pending","first_stage_passed","second_stage_waiting","second_stage_review","smart_lock_testing"]).order("created_at",{ascending:!1}));if(e.error)throw r("error","❌ Parks fetch error:",e.error),e.error;const t=e.data||[];if(0===t.length)return r("info","ℹ️ No pending parks found"),void s([]);r("info",`✅ Found ${t.length} pending parks`);const n=[...new Set(t.map(e=>e.owner_id))],o=t.map(e=>e.id),[d,c,_,l]=await Promise.allSettled([n.length>0?a.from("profiles").select("id, name, postal_code, address, phone_number, email").in("id",n):Promise.resolve({data:[],error:null}),o.length>0?a.from("dog_park_review_stages").select("park_id, second_stage_submitted_at").in("park_id",o):Promise.resolve({data:[],error:null}),o.length>0?a.from("dog_park_facility_images").select("park_id, is_approved").in("park_id",o):Promise.resolve({data:[],error:null}),n.length>0?a.from("owner_verifications").select("user_id, verification_id, status, verification_data, created_at").in("user_id",n):Promise.resolve({data:[],error:null})]),g="fulfilled"===d.status&&d.value.data||[],p=new Map(g.map(e=>[e.id,e])),m="fulfilled"===c.status&&c.value.data||[],f=new Map(m.map(e=>[e.park_id,e])),u="fulfilled"===_.status&&_.value.data||[],h=new Map;u.forEach(e=>{h.has(e.park_id)||h.set(e.park_id,[]),h.get(e.park_id).push(e)});const v="fulfilled"===l.status&&l.value.data||[],w=new Map(v.map(e=>[e.user_id,e])),y=t.map(e=>{const a=p.get(e.owner_id),r=f.get(e.id),t=h.get(e.id)||[],i=w.get(e.owner_id),n=t.length,o=t.filter(e=>!0===e.is_approved).length,s=t.filter(e=>!1===e.is_approved).length,d=t.filter(e=>null===e.is_approved).length;let c="",_="";return i&&i.verification_data&&"object"==typeof i.verification_data&&(c=i.verification_data.document_url||i.verification_data.file_path||"",_=i.verification_data.file_name||i.verification_data.filename||""),!c&&i?.verification_id&&(c=i.verification_id),!_&&c&&(_=c.split("/").pop()||"identity_document"),{id:e.id,name:e.name,address:e.address,status:e.status,created_at:e.created_at,owner_id:e.owner_id,owner_name:a?.name||"Unknown Owner",second_stage_submitted_at:r?.second_stage_submitted_at||null,total_images:n,approved_images:o,rejected_images:s,pending_images:d,owner_postal_code:a?.postal_code||"",owner_address:a?.address||"",owner_phone_number:a?.phone_number||"",owner_email:a?.email||"",identity_document_url:c,identity_document_filename:_,identity_status:i?.status||"not_submitted",identity_created_at:i?.created_at||""}});r("info",`✅ Transformed ${y.length} parks with image data`),s(y)}catch(e){r("error","❌ Error fetching parks:",{error:t(e)}),p(`ドッグラン申請データの取得に失敗しました: ${t(e)}`)}})():"vaccines"===n&&await u()}catch(e){r("error","❌ Error in fetchData:",{error:t(e)}),p(`データの取得に失敗しました: ${t(e)}`)}finally{l(!1)}};return e.useEffect(()=>{h()},[n]),{pendingParks:o,pendingVaccines:d,isLoading:_,error:g,success:m,refetch:h}},o=n=>{const[o,s]=e.useState([]),[d,c]=e.useState(!1),[_,l]=e.useState(""),g=async e=>{try{c(!0),l(""),r("info",`🔍 Fetching images for park: ${e}`);const t=await i(()=>a.from("dog_park_facility_images").select("*").eq("park_id",e).order("created_at",{ascending:!1}));if(t.error)throw r("error","❌ Images fetch error:",t.error),t.error;const n=t.data||[];r("info",`✅ Found ${n.length} images for park ${e}`),s(n)}catch(n){r("error","❌ Error fetching park images:",{error:t(n)}),l(`画像データの取得に失敗しました: ${t(n)}`)}finally{c(!1)}};return e.useEffect(()=>{n&&g(n)},[n]),{parkImages:o,isLoading:d,error:_,fetchParkImages:g}};export{n as a,o as u};
