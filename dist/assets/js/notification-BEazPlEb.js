var t=Object.defineProperty,i=(i,s,e)=>((i,s,e)=>s in i?t(i,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[s]=e)(i,"symbol"!=typeof s?s+"":s,e);const s=new class{constructor(){i(this,"notifications",[]),i(this,"listeners",new Set),i(this,"idCounter",0)}show(t){const i="notification-"+ ++this.idCounter,s={id:i,options:{type:"info",duration:4e3,position:"top-right",closable:!0,...t},createdAt:new Date};return this.notifications.push(s),this.notifyListeners(),s.options.duration&&s.options.duration>0&&setTimeout(()=>{this.remove(i)},s.options.duration),i}success(t,i){return this.show({message:t,type:"success",...i})}error(t,i){return this.show({message:t,type:"error",duration:6e3,...i})}warning(t,i){return this.show({message:t,type:"warning",duration:5e3,...i})}info(t,i){return this.show({message:t,type:"info",...i})}remove(t){this.notifications=this.notifications.filter(i=>i.id!==t),this.notifyListeners()}clear(){this.notifications=[],this.notifyListeners()}getNotifications(){return[...this.notifications]}subscribe(t){return this.listeners.add(t),()=>{this.listeners.delete(t)}}notifyListeners(){this.listeners.forEach(t=>{t([...this.notifications])})}},e={success:(t,i)=>s.success(t,i),error:(t,i)=>s.error(t,i),warning:(t,i)=>s.warning(t,i),info:(t,i)=>s.info(t,i),show:t=>s.show(t)};export{e as n};
