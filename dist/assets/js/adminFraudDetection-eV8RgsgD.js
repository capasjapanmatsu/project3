import{s as e}from"./index-Dm33kIpv.js";async function t(){try{const{data:t,error:r}=await e.from("fraud_detection_logs").select("\n        user_id,\n        detection_type,\n        risk_score,\n        details,\n        action_taken,\n        created_at\n      ").gte("risk_score",50).order("created_at",{ascending:!1});if(r)throw r;if(!t||0===t.length)return[];const i=new Map;t.forEach(e=>{i.has(e.user_id)||i.set(e.user_id,[]),i.get(e.user_id).push(e)});const a=Array.from(i.keys()),{data:s,error:n}=await e.from("profiles").select("id, name, created_at").in("id",a);if(n)throw n;const{data:c,error:d}=await e.from("auth.users").select("id, email, created_at").in("id",a),o=[];for(const e of a){const t=i.get(e)||[],r=s?.find(t=>t.id===e),a=c?.find(t=>t.id===e),n=Math.max(...t.map(e=>e.risk_score)),d=[...new Set(t.map(e=>e.detection_type))],l=t[0]?.created_at,_=t.filter(e=>"duplicate_device"===e.detection_type).length,u=t.filter(e=>"duplicate_ip"===e.detection_type).length,p=t.filter(e=>"duplicate_card"===e.detection_type).length,f=t.some(e=>e.details&&(e.details.trialAbuse||e.details.multipleTrials));let g="low";n>=70?g="high":n>=50&&(g="medium"),o.push({userId:e,userName:r?.name||"Unknown",email:a?.email||"Unknown",riskScore:n,riskLevel:g,detectionTypes:d,deviceDuplicates:_,ipDuplicates:u,cardDuplicates:p,lastDetection:l,trialAbuse:f,createdAt:r?.created_at||a?.created_at||""})}return o.sort((e,t)=>t.riskScore-e.riskScore)}catch(t){return[]}}async function r(t){try{const{data:r,error:i}=await e.from("user_device_fingerprints").select("fingerprint, ip_address, user_agent, action_type, created_at").eq("user_id",t).order("created_at",{ascending:!1});if(i)throw i;const{data:a,error:s}=await e.from("fraud_detection_logs").select("detection_type, risk_score, details, action_taken, created_at").eq("user_id",t).order("created_at",{ascending:!1});if(s)throw s;const{data:n,error:c}=await e.from("stripe_card_fingerprints").select("card_fingerprint, trial_used, trial_used_at, created_at").eq("user_id",t).order("created_at",{ascending:!1});if(c)throw c;const d=r?.map(e=>e.fingerprint)||[];let o=[];if(d.length>0){const{data:r,error:i}=await e.from("user_device_fingerprints").select("user_id").in("fingerprint",d).neq("user_id",t);!i&&r&&(o=[...new Set(r.map(e=>e.user_id))])}const l=[...new Set(r?.map(e=>e.ip_address).filter(Boolean)||[])];let _=[];if(l.length>0){const{data:r,error:i}=await e.from("user_device_fingerprints").select("user_id").in("ip_address",l).neq("user_id",t);!i&&r&&(_=[...new Set(r.map(e=>e.user_id))])}return{userId:t,deviceFingerprints:r||[],fraudLogs:a||[],cardUsage:n||[],duplicateDeviceUsers:o,duplicateIpUsers:_}}catch(r){return null}}async function i(){try{const t=new Date(Date.now()-2592e6).toISOString(),{data:r,error:i}=await e.from("fraud_detection_logs").select("risk_score, detection_type, action_taken, details").gte("created_at",t);if(i)throw i;const a=r||[],s=new Set(a.filter(e=>e.risk_score>=70).map(e=>e.user_id)).size,n=new Set(a.filter(e=>e.risk_score>=50&&e.risk_score<70).map(e=>e.user_id)).size,c=a.length,d=a.filter(e=>"restriction"===e.action_taken||"ban"===e.action_taken).length;return{totalHighRiskUsers:s,totalMediumRiskUsers:n,recentDetections:c,blockedAttempts:d,trialAbuseCount:a.filter(e=>e.details&&(e.details.trialAbuse||e.details.multipleTrials)).length}}catch(t){return{totalHighRiskUsers:0,totalMediumRiskUsers:0,recentDetections:0,blockedAttempts:0,trialAbuseCount:0}}}export{t as a,r as b,i as g};
